{
  "address": "0xf85830D31558553AfbE736682B06A20904aDf40a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBancorNetwork",
          "name": "initNetwork",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "initBNT",
          "type": "address"
        },
        {
          "internalType": "contract INetworkSettings",
          "name": "initNetworkSettings",
          "type": "address"
        },
        {
          "internalType": "contract IMasterVault",
          "name": "initMasterVault",
          "type": "address"
        },
        {
          "internalType": "contract IBNTPool",
          "name": "initBNTPool",
          "type": "address"
        },
        {
          "internalType": "contract IExternalProtectionVault",
          "name": "initExternalProtectionVault",
          "type": "address"
        },
        {
          "internalType": "contract IPoolTokenFactory",
          "name": "initPoolTokenFactory",
          "type": "address"
        },
        {
          "internalType": "contract IPoolCollectionUpgrader",
          "name": "initPoolCollectionUpgrader",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositingDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientSourceAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientTargetAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolCollection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakedBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolCollectionWithdrawalInputInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateUnstable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TradingDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevFeePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newFeePPM",
          "type": "uint32"
        }
      ],
      "name": "DefaultTradingFeePPMUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevDepositLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDepositLimit",
          "type": "uint256"
        }
      ],
      "name": "DepositLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "DepositingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPoolToken",
          "name": "poolToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PoolMigratedIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PoolMigratedOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "externalProtectionBaseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bntAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualBalance",
          "type": "uint256"
        }
      ],
      "name": "TotalLiquidityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "name": "TradingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevFeePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newFeePPM",
          "type": "uint32"
        }
      ],
      "name": "TradingFeePPMUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevLiquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidity",
          "type": "uint256"
        }
      ],
      "name": "TradingLiquidityUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultTradingFeePPM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "disableTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "enableDepositing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bntRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenRate",
          "type": "uint256"
        }
      ],
      "name": "enableTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isPoolValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IPoolToken",
              "name": "poolToken",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "tradingFeePPM",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "tradingEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "depositingEnabled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "components": [
                    {
                      "internalType": "uint112",
                      "name": "n",
                      "type": "uint112"
                    },
                    {
                      "internalType": "uint112",
                      "name": "d",
                      "type": "uint112"
                    }
                  ],
                  "internalType": "struct Fraction112",
                  "name": "rate",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AverageRate",
              "name": "averageRate",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "depositLimit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "bntTradingLiquidity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseTokenTradingLiquidity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakedBalance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PoolLiquidity",
              "name": "liquidity",
              "type": "tuple"
            }
          ],
          "internalType": "struct Pool",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "migratePoolIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IPoolCollection",
          "name": "targetPoolCollection",
          "type": "address"
        }
      ],
      "name": "migratePoolOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "onFeesCollected",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IPoolToken",
              "name": "poolToken",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "tradingFeePPM",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "tradingEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "depositingEnabled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "components": [
                    {
                      "internalType": "uint112",
                      "name": "n",
                      "type": "uint112"
                    },
                    {
                      "internalType": "uint112",
                      "name": "d",
                      "type": "uint112"
                    }
                  ],
                  "internalType": "struct Fraction112",
                  "name": "rate",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AverageRate",
              "name": "averageRate",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "depositLimit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "bntTradingLiquidity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseTokenTradingLiquidity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakedBalance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PoolLiquidity",
              "name": "liquidity",
              "type": "tuple"
            }
          ],
          "internalType": "struct Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bntTradingLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseTokenTradingLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakedBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolLiquidity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolToken",
      "outputs": [
        {
          "internalType": "contract IPoolToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountToDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolPoolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "poolTokenAmountToBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "poolTokenToUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolType",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract Token[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newDefaultTradingFeePPM",
          "type": "uint32"
        }
      ],
      "name": "setDefaultTradingFeePPM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newDepositLimit",
          "type": "uint256"
        }
      ],
      "name": "setDepositLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "newTradingFeePPM",
          "type": "uint32"
        }
      ],
      "name": "setTradingFeePPM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        }
      ],
      "name": "tradeBySourceAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradingFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "networkFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeAmountAndFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSourceAmount",
          "type": "uint256"
        }
      ],
      "name": "tradeByTargetAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradingFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "networkFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeAmountAndFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        }
      ],
      "name": "tradeInputAndFeeByTargetAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradingFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "networkFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeAmountAndFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        }
      ],
      "name": "tradeOutputAndFeeBySourceAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradingFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "networkFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeAmountAndFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerCandidate",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "underlyingToPoolToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawalAmounts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bntAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawalAmounts",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x198a46d6aef38abbfc38c95992dbc739c74a0e034c99c7cdeab46b085b009db7",
  "receipt": {
    "to": null,
    "from": "0xdfeE8DC240c6CadC2c7f7f9c257c259914dEa84E",
    "contractAddress": "0xf85830D31558553AfbE736682B06A20904aDf40a",
    "transactionIndex": 0,
    "gasUsed": "4965720",
    "logsBloom": "0x
    "blockHash": "0x9c61f78f91132c21467eb7d41835f808d093bf11021d175dc6caf6cb7a70a3a6",
    "transactionHash": "0x198a46d6aef38abbfc38c95992dbc739c74a0e034c99c7cdeab46b085b009db7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14406068,
        "transactionHash": "0x198a46d6aef38abbfc38c95992dbc739c74a0e034c99c7cdeab46b085b009db7",
        "address": "0xf85830D31558553AfbE736682B06A20904aDf40a",
        "topics": [
          "0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dfee8dc240c6cadc2c7f7f9c257c259914dea84e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9c61f78f91132c21467eb7d41835f808d093bf11021d175dc6caf6cb7a70a3a6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14406068,
        "transactionHash": "0x198a46d6aef38abbfc38c95992dbc739c74a0e034c99c7cdeab46b085b009db7",
        "address": "0xf85830D31558553AfbE736682B06A20904aDf40a",
        "topics": [
          "0xb804b0ec3f0ea43004870df377170ce44cb789adca16d23286e337605558117f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007d0",
        "logIndex": 0,
        "blockHash": "0x9c61f78f91132c21467eb7d41835f808d093bf11021d175dc6caf6cb7a70a3a6"
      }
    ],
    "blockNumber": 14406068,
    "cumulativeGasUsed": "4965720",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x093C761bd5B8f71d72cBC74A72cc9c6aEDC8EE49",
    "0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C",
    "0x302979c8f478279Ab3F46Ce3Dc96c98d9c28fb0c",
    "0xCc039b94a38Eb7039556De6c95aC7a48AAE86cE0",
    "0x6210cE7207537eE1ec219f4562e6d05bed208852",
    "0xbab75527ccEefC7f7678140a0f932655D050D759",
    "0x3Aed5Af110B1E290f691828697a31E8BdeE3681a",
    "0x7Cd247CF8Df355Bc0C965026d482fB27CdcD7eA6"
  ],
  "numDeployments": 1,
  "solcInputHash": "dcea142469df7f75d330e08f80ea8523",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBancorNetwork\",\"name\":\"initNetwork\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"initBNT\",\"type\":\"address\"},{\"internalType\":\"contract INetworkSettings\",\"name\":\"initNetworkSettings\",\"type\":\"address\"},{\"internalType\":\"contract IMasterVault\",\"name\":\"initMasterVault\",\"type\":\"address\"},{\"internalType\":\"contract IBNTPool\",\"name\":\"initBNTPool\",\"type\":\"address\"},{\"internalType\":\"contract IExternalProtectionVault\",\"name\":\"initExternalProtectionVault\",\"type\":\"address\"},{\"internalType\":\"contract IPoolTokenFactory\",\"name\":\"initPoolTokenFactory\",\"type\":\"address\"},{\"internalType\":\"contract IPoolCollectionUpgrader\",\"name\":\"initPoolCollectionUpgrader\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSourceAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTargetAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolCollectionWithdrawalInputInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateUnstable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevFeePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFeePPM\",\"type\":\"uint32\"}],\"name\":\"DefaultTradingFeePPMUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevDepositLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositLimit\",\"type\":\"uint256\"}],\"name\":\"DepositLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"DepositingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolMigratedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolMigratedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalProtectionBaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bntAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFeeAmount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualBalance\",\"type\":\"uint256\"}],\"name\":\"TotalLiquidityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevFeePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFeePPM\",\"type\":\"uint32\"}],\"name\":\"TradingFeePPMUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidity\",\"type\":\"uint256\"}],\"name\":\"TradingLiquidityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultTradingFeePPM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"enableDepositing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bntRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenRate\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tradingFeePPM\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"tradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositingEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"n\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"d\",\"type\":\"uint112\"}],\"internalType\":\"struct Fraction112\",\"name\":\"rate\",\"type\":\"tuple\"}],\"internalType\":\"struct AverageRate\",\"name\":\"averageRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bntTradingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenTradingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"internalType\":\"struct Pool\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"migratePoolIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IPoolCollection\",\"name\":\"targetPoolCollection\",\"type\":\"address\"}],\"name\":\"migratePoolOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"onFeesCollected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolData\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tradingFeePPM\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"tradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositingEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"n\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"d\",\"type\":\"uint112\"}],\"internalType\":\"struct Fraction112\",\"name\":\"rate\",\"type\":\"tuple\"}],\"internalType\":\"struct AverageRate\",\"name\":\"averageRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bntTradingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenTradingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"internalType\":\"struct Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bntTradingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenTradingLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolLiquidity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"contract IPoolToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolPoolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"poolTokenAmountToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"poolTokenToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolType\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract Token[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newDefaultTradingFeePPM\",\"type\":\"uint32\"}],\"name\":\"setDefaultTradingFeePPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDepositLimit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newTradingFeePPM\",\"type\":\"uint32\"}],\"name\":\"setTradingFeePPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"tradeBySourceAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeAmountAndFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSourceAmount\",\"type\":\"uint256\"}],\"name\":\"tradeByTargetAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeAmountAndFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"tradeInputAndFeeByTargetAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeAmountAndFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"}],\"name\":\"tradeOutputAndFeeBySourceAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeAmountAndFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerCandidate\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"underlyingToPoolToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawalAmounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bntAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawalAmounts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Pool Collection contract notes: - the address of reserve token serves as the pool unique ID in both contract functions and events\",\"events\":{\"DefaultTradingFeePPMUpdated(uint32,uint32)\":{\"details\":\"triggered when the default trading fee is updated\"},\"DepositLimitUpdated(address,uint256,uint256)\":{\"details\":\"triggered when a pool's deposit limit is updated\"},\"DepositingEnabled(address,bool)\":{\"details\":\"triggered when depositing into a specific pool is enabled/disabled\"},\"PoolCreated(address,address)\":{\"details\":\"triggered when a pool is created\"},\"PoolMigratedIn(address)\":{\"details\":\"triggered when a pool is migrated into this pool collection\"},\"PoolMigratedOut(address)\":{\"details\":\"triggered when a pool is migrated out of this pool collection\"},\"TokenDeposited(bytes32,address,address,uint256,uint256)\":{\"details\":\"triggered when new liquidity is deposited into a pool\"},\"TokenWithdrawn(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"triggered when existing liquidity is withdrawn from a pool\"},\"TotalLiquidityUpdated(bytes32,address,uint256,uint256,uint256)\":{\"details\":\"triggered when the total liquidity in a pool is updated\"},\"TradingEnabled(address,bool,uint8)\":{\"details\":\"triggered when trading in a specific pool is enabled/disabled\"},\"TradingFeePPMUpdated(address,uint32,uint32)\":{\"details\":\"triggered when a specific pool's trading fee is updated\"},\"TradingLiquidityUpdated(bytes32,address,address,uint256,uint256)\":{\"details\":\"triggered when the trading liquidity in a pool is updated\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"used by a new owner to accept an ownership transfer\"},\"constructor\":{\"details\":\"initializes a new PoolCollection contract\"},\"createPool(address)\":{\"details\":\"creates a new pool requirements: - the caller must be the network contract - the pool should have been whitelisted - the pool isn't already defined in the collection\"},\"defaultTradingFeePPM()\":{\"details\":\"returns the default trading fee (in units of PPM)\"},\"depositFor(bytes32,address,address,uint256)\":{\"details\":\"deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount requirements: - the caller must be the network contract - assumes that the base token has been already deposited in the vault\"},\"disableTrading(address)\":{\"details\":\"disables trading in a given pool requirements: - the caller must be the owner of the contract\"},\"enableDepositing(address,bool)\":{\"details\":\"enables/disables depositing into a given pool requirements: - the caller must be the owner of the contract\"},\"enableTrading(address,uint256,uint256)\":{\"details\":\"enables trading in a given pool, by providing the funding rate as two virtual balances, and updates its trading liquidity requirements: - the caller must be the owner of the contract\"},\"isPoolValid(address)\":{\"details\":\"returns whether a pool is valid\"},\"migratePoolIn(address,(address,uint32,bool,bool,(uint32,(uint112,uint112)),uint256,(uint256,uint256,uint256)))\":{\"details\":\"migrates a pool to this pool collection requirements: - the caller must be the pool collection upgrader contract\"},\"migratePoolOut(address,address)\":{\"details\":\"migrates a pool from this pool collection requirements: - the caller must be the pool collection upgrader contract\"},\"newOwner()\":{\"details\":\"returns the address of the new owner candidate\"},\"onFeesCollected(address,uint256)\":{\"details\":\"notifies the pool of accrued fees requirements: - the caller must be the network contract\"},\"owner()\":{\"details\":\"returns the address of the current owner\"},\"poolCount()\":{\"details\":\"returns the number of all the pools which are managed by this pool collection\"},\"poolData(address)\":{\"details\":\"returns specific pool's data\"},\"poolLiquidity(address)\":{\"details\":\"returns the overall liquidity in the pool\"},\"poolToken(address)\":{\"details\":\"returns the pool token of the pool\"},\"poolTokenAmountToBurn(address,uint256,uint256)\":{\"details\":\"returns the number of pool token to burn in order to increase everyone's underlying value by the specified amount\"},\"poolTokenToUnderlying(address,uint256)\":{\"details\":\"converts the specified pool token amount to the underlying base token amount\"},\"poolType()\":{\"details\":\"returns the type of the pool\"},\"pools()\":{\"details\":\"returns all the pools which are managed by this pool collection\"},\"setDefaultTradingFeePPM(uint32)\":{\"details\":\"sets the default trading fee (in units of PPM) requirements: - the caller must be the owner of the contract\"},\"setDepositLimit(address,uint256)\":{\"details\":\"sets the deposit limit of a given pool requirements: - the caller must be the owner of the contract\"},\"setTradingFeePPM(address,uint32)\":{\"details\":\"sets the trading fee of a given pool requirements: - the caller must be the owner of the contract\"},\"tradeBySourceAmount(bytes32,address,address,uint256,uint256)\":{\"details\":\"performs a trade by providing the source amount and returns the target amount and the associated fee requirements: - the caller must be the network contract\"},\"tradeByTargetAmount(bytes32,address,address,uint256,uint256)\":{\"details\":\"performs a trade by providing the target amount and returns the required source amount and the associated fee requirements: - the caller must be the network contract\"},\"tradeInputAndFeeByTargetAmount(address,address,uint256)\":{\"details\":\"returns the input amount and fee when trading by providing the target amount\"},\"tradeOutputAndFeeBySourceAmount(address,address,uint256)\":{\"details\":\"returns the output amount and fee when trading by providing the source amount\"},\"transferOwnership(address)\":{\"details\":\"allows transferring the contract ownership requirements: - the caller must be the owner of the contract - the new owner still needs to accept the transfer\"},\"underlyingToPoolToken(address,uint256)\":{\"details\":\"converts the specified underlying base token amount to pool token amount\"},\"withdraw(bytes32,address,address,uint256)\":{\"details\":\"handles some of the withdrawal-related actions and returns the withdrawn base token amount requirements: - the caller must be the network contract - the caller must have approved the collection to transfer/burn the pool token amount on its behalf\"},\"withdrawalAmounts(address,uint256)\":{\"details\":\"returns the amounts that would be returned if the position is currently withdrawn, along with the breakdown of the base token and the BNT compensation\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/PoolCollection.sol\":\"PoolCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@bancor/token-governance/contracts/IClaimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n/// @title Claimable contract interface\\ninterface IClaimable {\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x52c14ec7eac845d8ca8b3acb46bdf913e6ede14f4e8887f61dc35f93399e2962\",\"license\":\"MIT\"},\"@bancor/token-governance/contracts/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IClaimable.sol\\\";\\n\\n/// @title Mintable Token interface\\ninterface IMintableToken is IERC20, IClaimable {\\n    function issue(address to, uint256 amount) external;\\n\\n    function destroy(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x87ddb17ba18575515a97f615a84225bdb1fdf756eeae626287b94b2a3517a93b\",\"license\":\"MIT\"},\"@bancor/token-governance/contracts/ITokenGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"./IMintableToken.sol\\\";\\n\\n/// @title The interface for mintable/burnable token governance.\\ninterface ITokenGovernance {\\n    // The address of the mintable ERC20 token.\\n    function token() external view returns (IMintableToken);\\n\\n    /// @dev Mints new tokens.\\n    ///\\n    /// @param to Account to receive the new amount.\\n    /// @param amount Amount to increase the supply by.\\n    ///\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @dev Burns tokens from the caller.\\n    ///\\n    /// @param amount Amount to decrease the supply by.\\n    ///\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xebcf7997ed758d71a551597c3f7874b2b2fd91a72bbe50c634b02506f04e95b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/network/interfaces/IBancorNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITokenGovernance } from \\\"@bancor/token-governance/contracts/ITokenGovernance.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\nimport { IExternalProtectionVault } from \\\"../../vaults/interfaces/IExternalProtectionVault.sol\\\";\\nimport { IMasterVault } from \\\"./../../vaults/interfaces/IMasterVault.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IPoolCollection } from \\\"../../pools/interfaces/IPoolCollection.sol\\\";\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\nimport { IBNTPool } from \\\"../../pools/interfaces/IBNTPool.sol\\\";\\nimport { IPoolCollectionUpgrader } from \\\"../../pools/interfaces/IPoolCollectionUpgrader.sol\\\";\\n\\nimport { INetworkSettings } from \\\"./INetworkSettings.sol\\\";\\nimport { IPendingWithdrawals } from \\\"./IPendingWithdrawals.sol\\\";\\n\\n/**\\n * @dev Flash-loan recipient interface\\n */\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev a flash-loan recipient callback after each the caller must return the borrowed amount and an additional fee\\n     */\\n    function onFlashLoan(\\n        address caller,\\n        IERC20 erc20Token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        bytes memory data\\n    ) external;\\n}\\n\\n/**\\n * @dev Bancor Network interface\\n */\\ninterface IBancorNetwork is IUpgradeable {\\n    /**\\n     * @dev returns the set of all valid pool collections\\n     */\\n    function poolCollections() external view returns (IPoolCollection[] memory);\\n\\n    /**\\n     * @dev returns the most recent collection that was added to the pool collections set for a specific type\\n     */\\n    function latestPoolCollection(uint16 poolType) external view returns (IPoolCollection);\\n\\n    /**\\n     * @dev returns the set of all liquidity pools\\n     */\\n    function liquidityPools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the respective pool collection for the provided pool\\n     */\\n    function collectionByPool(Token pool) external view returns (IPoolCollection);\\n\\n    /**\\n     * @dev returns whether the pool is valid\\n     */\\n    function isPoolValid(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev creates a new pool\\n     *\\n     * requirements:\\n     *\\n     * - the pool doesn't exist\\n     */\\n    function createPool(uint16 poolType, Token token) external;\\n\\n    /**\\n     * @dev upgrades a list of pools\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     */\\n    function upgradePools(Token[] calldata pools) external;\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (ETH is handled separately)\\n     */\\n    function depositFor(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity for the current provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (ETH is handled separately)\\n     */\\n    function deposit(Token pool, uint256 tokenAmount) external payable returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider by providing an EIP712 typed signature for an EIP2612 permit\\n     * request and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function depositForPermitted(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity by providing an EIP712 typed signature for an EIP2612 permit request and returns the\\n     * respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function depositPermitted(\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws liquidity and returns the withdrawn amount\\n     *\\n     * requirements:\\n     *\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     * - the specified withdrawal request is eligible for completion\\n     * - the provider must have approved the network to transfer VBNT amount on its behalf, when withdrawing BNT\\n     * liquidity\\n     */\\n    function withdraw(uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf, in the non-ETH case\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable;\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount and providing an EIP712 typed signature for an\\n     * EIP2612 permit request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function tradeBySourceAmountPermitted(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf, in the non-ETH case\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable;\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount and providing an EIP712 typed signature for an\\n     * EIP2612 permit request and returns the target amount and fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function tradeByTargetAmountPermitted(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev provides a flash-loan\\n     *\\n     * requirements:\\n     *\\n     * - the recipient's callback must return *at least* the borrowed amount and fee back to the specified return address\\n     */\\n    function flashLoan(\\n        Token token,\\n        uint256 amount,\\n        IFlashLoanRecipient recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the contract to transfer the pool token amount on its behalf\\n     */\\n    function initWithdrawal(IPoolToken poolToken, uint256 poolTokenAmount) external returns (uint256);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal by providing an EIP712 typed signature for an EIP2612 permit request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function initWithdrawalPermitted(\\n        IPoolToken poolToken,\\n        uint256 poolTokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev cancels a withdrawal request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have already initiated a withdrawal and received the specified id\\n     */\\n    function cancelWithdrawal(uint256 id) external;\\n\\n    /**\\n     * @dev deposits liquidity during a migration\\n     */\\n    function migrateLiquidity(\\n        Token token,\\n        address provider,\\n        uint256 amount,\\n        uint256 availableAmount,\\n        uint256 originalAmount\\n    ) external payable;\\n\\n    /**\\n     * @dev withdraws pending network fees\\n     *\\n     * requirements:\\n     *\\n     * - * - the caller must have the ROLE_NETWORK_FEE_MANAGER privilege\\n     */\\n    function withdrawNetworkFees(address recipient) external;\\n}\\n\",\"keccak256\":\"0xdbfe2244e920b2207b0f94147f6e15a969a9705f79e05c131dea13aa96c5fa70\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/INetworkSettings.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nerror NotWhitelisted();\\n\\nstruct VortexRewards {\\n    // the percentage of converted BNT to be sent to the initiator of the burning event (in units of PPM)\\n    uint32 burnRewardPPM;\\n    // the maximum burn reward to be sent to the initiator of the burning event\\n    uint256 burnRewardMaxAmount;\\n}\\n\\n/**\\n * @dev Network Settings interface\\n */\\ninterface INetworkSettings is IUpgradeable {\\n    /**\\n     * @dev returns the protected tokens whitelist\\n     */\\n    function protectedTokenWhitelist() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev checks whether a given token is whitelisted\\n     */\\n    function isTokenWhitelisted(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns the BNT funding limit for a given pool\\n     */\\n    function poolFundingLimit(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the minimum BNT trading liquidity required before the system enables trading in the relevant pool\\n     */\\n    function minLiquidityForTrading() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the global network fee (in units of PPM)\\n     *\\n     * notes:\\n     *\\n     * - the network fee is a portion of the total fees from each pool\\n     */\\n    function networkFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the withdrawal fee (in units of PPM)\\n     */\\n    function withdrawalFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the flash-loan fee (in units of PPM)\\n     */\\n    function flashLoanFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the vortex settings\\n     */\\n    function vortexRewards() external view returns (VortexRewards memory);\\n}\\n\",\"keccak256\":\"0x0f8ba78e0bda7375f59540018ca132181c992a16f6e4237cbce47efd161931d5\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/IPendingWithdrawals.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\nimport { IBNTPool } from \\\"../../pools/interfaces/IBNTPool.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { INetworkSettings } from \\\"./INetworkSettings.sol\\\";\\nimport { IBancorNetwork } from \\\"./IBancorNetwork.sol\\\";\\n\\n/**\\n * @dev the data struct representing a pending withdrawal request\\n */\\nstruct WithdrawalRequest {\\n    address provider; // the liquidity provider\\n    IPoolToken poolToken; // the locked pool token\\n    Token reserveToken; // the reserve token to withdraw\\n    uint32 createdAt; // the time when the request was created (Unix timestamp))\\n    uint256 poolTokenAmount; // the locked pool token amount\\n    uint256 reserveTokenAmount; // the expected reserve token amount to withdraw\\n}\\n\\n/**\\n * @dev the data struct representing a completed withdrawal request\\n */\\nstruct CompletedWithdrawal {\\n    IPoolToken poolToken; // the transferred pool token\\n    uint256 poolTokenAmount; // the transferred pool token amount\\n}\\n\\n/**\\n * @dev Pending Withdrawals interface\\n */\\ninterface IPendingWithdrawals is IUpgradeable {\\n    /**\\n     * @dev returns the lock duration\\n     */\\n    function lockDuration() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the pending withdrawal requests count for a specific provider\\n     */\\n    function withdrawalRequestCount(address provider) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the pending withdrawal requests IDs for a specific provider\\n     */\\n    function withdrawalRequestIds(address provider) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev returns the pending withdrawal request with the specified ID\\n     */\\n    function withdrawalRequest(uint256 id) external view returns (WithdrawalRequest memory);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function initWithdrawal(\\n        address provider,\\n        IPoolToken poolToken,\\n        uint256 poolTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev cancels a withdrawal request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     */\\n    function cancelWithdrawal(address provider, uint256 id) external;\\n\\n    /**\\n     * @dev completes a withdrawal request and returns the pool token and its transferred amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     * - the lock duration has ended\\n     */\\n    function completeWithdrawal(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 id\\n    ) external returns (CompletedWithdrawal memory);\\n\\n    /**\\n     * @dev returns whether the given request is ready for withdrawal\\n     */\\n    function isReadyForWithdrawal(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2cb05fb05596b304df7708065b885892fcfff050c8c5c7e5fdac56afbed3d365\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/PoolCollection.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { TokenLibrary } from \\\"../token/TokenLibrary.sol\\\";\\n\\nimport { IMasterVault } from \\\"../vaults/interfaces/IMasterVault.sol\\\";\\nimport { IExternalProtectionVault } from \\\"../vaults/interfaces/IExternalProtectionVault.sol\\\";\\n\\nimport { IVersioned } from \\\"../utility/interfaces/IVersioned.sol\\\";\\n\\nimport { Fraction, Fraction112, Sint256 } from \\\"../utility/Types.sol\\\";\\nimport { PPM_RESOLUTION } from \\\"../utility/Constants.sol\\\";\\nimport { Owned } from \\\"../utility/Owned.sol\\\";\\nimport { BlockNumber } from \\\"../utility/BlockNumber.sol\\\";\\nimport { FractionLibrary, zeroFraction, zeroFraction112 } from \\\"../utility/FractionLibrary.sol\\\";\\nimport { MathEx } from \\\"../utility/MathEx.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    Utils,\\n    AlreadyExists,\\n    DoesNotExist,\\n    InvalidPoolCollection,\\n    InvalidStakedBalance\\n} from \\\"../utility/Utils.sol\\\";\\n\\nimport { INetworkSettings, NotWhitelisted } from \\\"../network/interfaces/INetworkSettings.sol\\\";\\nimport { IBancorNetwork } from \\\"../network/interfaces/IBancorNetwork.sol\\\";\\n\\nimport { IPoolToken } from \\\"./interfaces/IPoolToken.sol\\\";\\nimport { IPoolTokenFactory } from \\\"./interfaces/IPoolTokenFactory.sol\\\";\\nimport { IPoolCollectionUpgrader } from \\\"./interfaces/IPoolCollectionUpgrader.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    AverageRate,\\n    IPoolCollection,\\n    PoolLiquidity,\\n    Pool,\\n    TRADING_STATUS_UPDATE_DEFAULT,\\n    TRADING_STATUS_UPDATE_ADMIN,\\n    TRADING_STATUS_UPDATE_MIN_LIQUIDITY,\\n    TradeAmountAndFee,\\n    WithdrawalAmounts\\n} from \\\"./interfaces/IPoolCollection.sol\\\";\\n\\nimport { IBNTPool } from \\\"./interfaces/IBNTPool.sol\\\";\\n\\nimport { PoolCollectionWithdrawal } from \\\"./PoolCollectionWithdrawal.sol\\\";\\n\\n// base token withdrawal output amounts\\nstruct InternalWithdrawalAmounts {\\n    uint256 baseTokensToTransferFromMasterVault; // base token amount to transfer from the master vault to the provider\\n    uint256 bntToMintForProvider; // BNT amount to mint directly for the provider\\n    uint256 baseTokensToTransferFromEPV; // base token amount to transfer from the external protection vault to the provider\\n    Sint256 baseTokensTradingLiquidityDelta; // base token amount to add to the trading liquidity\\n    Sint256 bntTradingLiquidityDelta; // BNT amount to add to the trading liquidity and to the master vault\\n    Sint256 bntProtocolHoldingsDelta; // BNT amount add to the protocol equity\\n    uint256 baseTokensWithdrawalFee; // base token amount to keep in the pool as a withdrawal fee\\n    uint256 baseTokensWithdrawalAmount; // base token amount equivalent to the base pool token's withdrawal amount\\n    uint256 poolTokenTotalSupply; // base pool token's total supply\\n    uint256 newBaseTokenTradingLiquidity; // new base token trading liquidity\\n    uint256 newBNTTradingLiquidity; // new BNT trading liquidity\\n}\\n\\nstruct TradingLiquidityAction {\\n    bool update;\\n    uint256 newAmount;\\n}\\n\\nenum PoolRateState {\\n    Uninitialized,\\n    Unstable,\\n    Stable\\n}\\n\\n/**\\n * @dev Pool Collection contract\\n *\\n * notes:\\n *\\n * - the address of reserve token serves as the pool unique ID in both contract functions and events\\n */\\ncontract PoolCollection is IPoolCollection, Owned, BlockNumber, Utils {\\n    using TokenLibrary for Token;\\n    using FractionLibrary for Fraction;\\n    using FractionLibrary for Fraction112;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error AlreadyEnabled();\\n    error DepositLimitExceeded();\\n    error DepositingDisabled();\\n    error InsufficientLiquidity();\\n    error InsufficientSourceAmount();\\n    error InsufficientTargetAmount();\\n    error InvalidRate();\\n    error RateUnstable();\\n    error TradingDisabled();\\n\\n    uint16 private constant POOL_TYPE = 1;\\n    uint256 private constant LIQUIDITY_GROWTH_FACTOR = 2;\\n    uint256 private constant BOOTSTRAPPING_LIQUIDITY_BUFFER_FACTOR = 2;\\n    uint32 private constant DEFAULT_TRADING_FEE_PPM = 2000; // 0.2%\\n    uint32 private constant RATE_MAX_DEVIATION_PPM = 10000; // %1\\n\\n    // the average rate is recalculated based on the ratio between the weights of the rates the smaller the weights are,\\n    // the larger the supported range of each one of the rates is\\n    uint256 private constant EMA_AVERAGE_RATE_WEIGHT = 4;\\n    uint256 private constant EMA_SPOT_RATE_WEIGHT = 1;\\n\\n    struct TradeIntermediateResult {\\n        uint256 sourceAmount;\\n        uint256 targetAmount;\\n        uint256 limit;\\n        uint256 tradingFeeAmount;\\n        uint256 networkFeeAmount;\\n        uint256 sourceBalance;\\n        uint256 targetBalance;\\n        uint256 stakedBalance;\\n        Token pool;\\n        bool isSourceBNT;\\n        bool bySourceAmount;\\n        uint32 tradingFeePPM;\\n        bytes32 contextId;\\n    }\\n\\n    struct TradeAmountAndTradingFee {\\n        uint256 amount;\\n        uint256 tradingFeeAmount;\\n    }\\n\\n    // the network contract\\n    IBancorNetwork private immutable _network;\\n\\n    // the address of the BNT token\\n    IERC20 private immutable _bnt;\\n\\n    // the network settings contract\\n    INetworkSettings private immutable _networkSettings;\\n\\n    // the master vault contract\\n    IMasterVault private immutable _masterVault;\\n\\n    // the BNT pool contract\\n    IBNTPool internal immutable _bntPool;\\n\\n    // the address of the external protection vault\\n    IExternalProtectionVault private immutable _externalProtectionVault;\\n\\n    // the pool token factory contract\\n    IPoolTokenFactory private immutable _poolTokenFactory;\\n\\n    // the pool collection upgrader contract\\n    IPoolCollectionUpgrader private immutable _poolCollectionUpgrader;\\n\\n    // a mapping between tokens and their pools\\n    mapping(Token => Pool) internal _poolData;\\n\\n    // the set of all pools which are managed by this pool collection\\n    EnumerableSet.AddressSet private _pools;\\n\\n    // the default trading fee (in units of PPM)\\n    uint32 private _defaultTradingFeePPM;\\n\\n    /**\\n     * @dev triggered when a pool is created\\n     */\\n    event PoolCreated(IPoolToken indexed poolToken, Token indexed token);\\n\\n    /**\\n     * @dev triggered when a pool is migrated into this pool collection\\n     */\\n    event PoolMigratedIn(Token indexed token);\\n\\n    /**\\n     * @dev triggered when a pool is migrated out of this pool collection\\n     */\\n    event PoolMigratedOut(Token indexed token);\\n\\n    /**\\n     * @dev triggered when the default trading fee is updated\\n     */\\n    event DefaultTradingFeePPMUpdated(uint32 prevFeePPM, uint32 newFeePPM);\\n\\n    /**\\n     * @dev triggered when a specific pool's trading fee is updated\\n     */\\n    event TradingFeePPMUpdated(Token indexed pool, uint32 prevFeePPM, uint32 newFeePPM);\\n\\n    /**\\n     * @dev triggered when trading in a specific pool is enabled/disabled\\n     */\\n    event TradingEnabled(Token indexed pool, bool indexed newStatus, uint8 indexed reason);\\n\\n    /**\\n     * @dev triggered when depositing into a specific pool is enabled/disabled\\n     */\\n    event DepositingEnabled(Token indexed pool, bool indexed newStatus);\\n\\n    /**\\n     * @dev triggered when a pool's deposit limit is updated\\n     */\\n    event DepositLimitUpdated(Token indexed pool, uint256 prevDepositLimit, uint256 newDepositLimit);\\n\\n    /**\\n     * @dev triggered when new liquidity is deposited into a pool\\n     */\\n    event TokenDeposited(\\n        bytes32 indexed contextId,\\n        Token indexed token,\\n        address indexed provider,\\n        uint256 tokenAmount,\\n        uint256 poolTokenAmount\\n    );\\n\\n    /**\\n     * @dev triggered when existing liquidity is withdrawn from a pool\\n     */\\n    event TokenWithdrawn(\\n        bytes32 indexed contextId,\\n        Token indexed token,\\n        address indexed provider,\\n        uint256 tokenAmount,\\n        uint256 poolTokenAmount,\\n        uint256 externalProtectionBaseTokenAmount,\\n        uint256 bntAmount,\\n        uint256 withdrawalFeeAmount\\n    );\\n\\n    /**\\n     * @dev triggered when the trading liquidity in a pool is updated\\n     */\\n    event TradingLiquidityUpdated(\\n        bytes32 indexed contextId,\\n        Token indexed pool,\\n        Token indexed token,\\n        uint256 prevLiquidity,\\n        uint256 newLiquidity\\n    );\\n\\n    /**\\n     * @dev triggered when the total liquidity in a pool is updated\\n     */\\n    event TotalLiquidityUpdated(\\n        bytes32 indexed contextId,\\n        Token indexed pool,\\n        uint256 stakedBalance,\\n        uint256 poolTokenSupply,\\n        uint256 actualBalance\\n    );\\n\\n    /**\\n     * @dev initializes a new PoolCollection contract\\n     */\\n    constructor(\\n        IBancorNetwork initNetwork,\\n        IERC20 initBNT,\\n        INetworkSettings initNetworkSettings,\\n        IMasterVault initMasterVault,\\n        IBNTPool initBNTPool,\\n        IExternalProtectionVault initExternalProtectionVault,\\n        IPoolTokenFactory initPoolTokenFactory,\\n        IPoolCollectionUpgrader initPoolCollectionUpgrader\\n    )\\n        validAddress(address(initNetwork))\\n        validAddress(address(initBNT))\\n        validAddress(address(initNetworkSettings))\\n        validAddress(address(initMasterVault))\\n        validAddress(address(initBNTPool))\\n        validAddress(address(initExternalProtectionVault))\\n        validAddress(address(initPoolTokenFactory))\\n        validAddress(address(initPoolCollectionUpgrader))\\n    {\\n        _network = initNetwork;\\n        _bnt = initBNT;\\n        _networkSettings = initNetworkSettings;\\n        _masterVault = initMasterVault;\\n        _bntPool = initBNTPool;\\n        _externalProtectionVault = initExternalProtectionVault;\\n        _poolTokenFactory = initPoolTokenFactory;\\n        _poolCollectionUpgrader = initPoolCollectionUpgrader;\\n\\n        _setDefaultTradingFeePPM(DEFAULT_TRADING_FEE_PPM);\\n    }\\n\\n    modifier validRate(Fraction memory rate) {\\n        _validRate(rate);\\n\\n        _;\\n    }\\n\\n    function _validRate(Fraction memory rate) internal pure {\\n        if (!rate.isPositive()) {\\n            revert InvalidRate();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IVersioned\\n     */\\n    function version() external view virtual returns (uint16) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolType() external pure returns (uint16) {\\n        return POOL_TYPE;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function defaultTradingFeePPM() external view returns (uint32) {\\n        return _defaultTradingFeePPM;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function pools() external view returns (Token[] memory) {\\n        uint256 length = _pools.length();\\n        Token[] memory list = new Token[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            list[i] = Token(_pools.at(i));\\n        }\\n        return list;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolCount() external view returns (uint256) {\\n        return _pools.length();\\n    }\\n\\n    /**\\n     * @dev sets the default trading fee (in units of PPM)\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function setDefaultTradingFeePPM(uint32 newDefaultTradingFeePPM)\\n        external\\n        onlyOwner\\n        validFee(newDefaultTradingFeePPM)\\n    {\\n        _setDefaultTradingFeePPM(newDefaultTradingFeePPM);\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function createPool(Token token) external only(address(_network)) {\\n        if (!_networkSettings.isTokenWhitelisted(token)) {\\n            revert NotWhitelisted();\\n        }\\n\\n        IPoolToken newPoolToken = IPoolToken(_poolTokenFactory.createPoolToken(token));\\n\\n        newPoolToken.acceptOwnership();\\n\\n        Pool memory newPool = Pool({\\n            poolToken: newPoolToken,\\n            tradingFeePPM: _defaultTradingFeePPM,\\n            tradingEnabled: false,\\n            depositingEnabled: true,\\n            averageRate: AverageRate({ blockNumber: 0, rate: zeroFraction112() }),\\n            depositLimit: 0,\\n            liquidity: PoolLiquidity({ bntTradingLiquidity: 0, baseTokenTradingLiquidity: 0, stakedBalance: 0 })\\n        });\\n\\n        _addPool(token, newPool);\\n\\n        emit PoolCreated({ poolToken: newPoolToken, token: token });\\n\\n        emit TradingEnabled({ pool: token, newStatus: false, reason: TRADING_STATUS_UPDATE_DEFAULT });\\n        emit TradingFeePPMUpdated({ pool: token, prevFeePPM: 0, newFeePPM: newPool.tradingFeePPM });\\n        emit DepositingEnabled({ pool: token, newStatus: newPool.depositingEnabled });\\n        emit DepositLimitUpdated({ pool: token, prevDepositLimit: 0, newDepositLimit: newPool.depositLimit });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function isPoolValid(Token pool) external view returns (bool) {\\n        return _validPool(_poolData[pool]);\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolData(Token pool) external view returns (Pool memory) {\\n        return _poolData[pool];\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolLiquidity(Token pool) external view returns (PoolLiquidity memory) {\\n        return _poolData[pool].liquidity;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolToken(Token pool) external view returns (IPoolToken) {\\n        return _poolData[pool].poolToken;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolTokenToUnderlying(Token pool, uint256 poolTokenAmount) external view returns (uint256) {\\n        Pool memory data = _poolData[pool];\\n\\n        return _poolTokenToUnderlying(data.poolToken.totalSupply(), poolTokenAmount, data.liquidity.stakedBalance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function underlyingToPoolToken(Token pool, uint256 tokenAmount) external view returns (uint256) {\\n        Pool memory data = _poolData[pool];\\n\\n        return _underlyingToPoolToken(data.poolToken.totalSupply(), tokenAmount, data.liquidity.stakedBalance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function poolTokenAmountToBurn(\\n        Token pool,\\n        uint256 tokenAmountToDistribute,\\n        uint256 protocolPoolTokenAmount\\n    ) external view returns (uint256) {\\n        if (tokenAmountToDistribute == 0) {\\n            return 0;\\n        }\\n\\n        Pool memory data = _poolData[pool];\\n\\n        uint256 poolTokenSupply = data.poolToken.totalSupply();\\n        uint256 val = tokenAmountToDistribute * poolTokenSupply;\\n\\n        return\\n            MathEx.mulDivF(\\n                val,\\n                poolTokenSupply,\\n                val + data.liquidity.stakedBalance * (poolTokenSupply - protocolPoolTokenAmount)\\n            );\\n    }\\n\\n    /**\\n     * @dev sets the trading fee of a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function setTradingFeePPM(Token pool, uint32 newTradingFeePPM) external onlyOwner validFee(newTradingFeePPM) {\\n        Pool storage data = _poolStorage(pool);\\n\\n        uint32 prevTradingFeePPM = data.tradingFeePPM;\\n        if (prevTradingFeePPM == newTradingFeePPM) {\\n            return;\\n        }\\n\\n        data.tradingFeePPM = newTradingFeePPM;\\n\\n        emit TradingFeePPMUpdated({ pool: pool, prevFeePPM: prevTradingFeePPM, newFeePPM: newTradingFeePPM });\\n    }\\n\\n    /**\\n     * @dev enables trading in a given pool, by providing the funding rate as two virtual balances, and updates its\\n     * trading liquidity\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function enableTrading(\\n        Token pool,\\n        uint256 bntRate,\\n        uint256 baseTokenRate\\n    ) external onlyOwner {\\n        Fraction memory fundingRate = Fraction({ n: bntRate, d: baseTokenRate });\\n        _validRate(fundingRate);\\n\\n        Pool storage data = _poolStorage(pool);\\n\\n        if (data.tradingEnabled) {\\n            revert AlreadyEnabled();\\n        }\\n\\n        // adjust the trading liquidity based on the base token vault balance and funding limits\\n        uint256 minLiquidityForTrading = _networkSettings.minLiquidityForTrading();\\n        _updateTradingLiquidity(bytes32(0), pool, data, data.liquidity, fundingRate, minLiquidityForTrading);\\n\\n        // verify that the BNT trading liquidity is equal or greater than the minimum liquidity for trading\\n        if (data.liquidity.bntTradingLiquidity < minLiquidityForTrading) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        data.averageRate = AverageRate({ blockNumber: _blockNumber(), rate: fundingRate.toFraction112() });\\n\\n        data.tradingEnabled = true;\\n\\n        emit TradingEnabled({ pool: pool, newStatus: true, reason: TRADING_STATUS_UPDATE_ADMIN });\\n    }\\n\\n    /**\\n     * @dev disables trading in a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function disableTrading(Token pool) external onlyOwner {\\n        Pool storage data = _poolStorage(pool);\\n\\n        _resetTradingLiquidity(bytes32(0), pool, data, TRADING_STATUS_UPDATE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev enables/disables depositing into a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function enableDepositing(Token pool, bool status) external onlyOwner {\\n        Pool storage data = _poolStorage(pool);\\n\\n        if (data.depositingEnabled == status) {\\n            return;\\n        }\\n\\n        data.depositingEnabled = status;\\n\\n        emit DepositingEnabled({ pool: pool, newStatus: status });\\n    }\\n\\n    /**\\n     * @dev sets the deposit limit of a given pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function setDepositLimit(Token pool, uint256 newDepositLimit) external onlyOwner {\\n        Pool storage data = _poolStorage(pool);\\n\\n        uint256 prevDepositLimit = data.depositLimit;\\n        if (prevDepositLimit == newDepositLimit) {\\n            return;\\n        }\\n\\n        data.depositLimit = newDepositLimit;\\n\\n        emit DepositLimitUpdated({ pool: pool, prevDepositLimit: prevDepositLimit, newDepositLimit: newDepositLimit });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    )\\n        external\\n        only(address(_network))\\n        validAddress(provider)\\n        greaterThanZero(tokenAmount)\\n        returns (uint256)\\n    {\\n        Pool storage data = _poolStorage(pool);\\n\\n        if (!data.depositingEnabled) {\\n            revert DepositingDisabled();\\n        }\\n\\n        // calculate the pool token amount to mint\\n        uint256 currentStakedBalance = data.liquidity.stakedBalance;\\n        uint256 prevPoolTokenTotalSupply = data.poolToken.totalSupply();\\n        uint256 poolTokenAmount = _underlyingToPoolToken(prevPoolTokenTotalSupply, tokenAmount, currentStakedBalance);\\n\\n        // verify that the staked balance and the newly deposited amount isn't higher than the deposit limit\\n        uint256 newStakedBalance = currentStakedBalance + tokenAmount;\\n        if (newStakedBalance > data.depositLimit) {\\n            revert DepositLimitExceeded();\\n        }\\n\\n        PoolLiquidity memory prevLiquidity = data.liquidity;\\n\\n        // update the staked balance with the full base token amount\\n        data.liquidity.stakedBalance = newStakedBalance;\\n\\n        // mint pool tokens to the provider\\n        data.poolToken.mint(provider, poolTokenAmount);\\n\\n        // adjust the trading liquidity based on the base token vault balance and funding limits\\n        _updateTradingLiquidity(\\n            contextId,\\n            pool,\\n            data,\\n            data.liquidity,\\n            data.averageRate.rate.fromFraction112(),\\n            _networkSettings.minLiquidityForTrading()\\n        );\\n\\n        emit TokenDeposited({\\n            contextId: contextId,\\n            token: pool,\\n            provider: provider,\\n            tokenAmount: tokenAmount,\\n            poolTokenAmount: poolTokenAmount\\n        });\\n\\n        _dispatchTradingLiquidityEvents(\\n            contextId,\\n            pool,\\n            prevPoolTokenTotalSupply + poolTokenAmount,\\n            prevLiquidity,\\n            data.liquidity\\n        );\\n\\n        return poolTokenAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 poolTokenAmount\\n    ) external only(address(_network)) validAddress(provider) greaterThanZero(poolTokenAmount) returns (uint256) {\\n        // obtain the withdrawal amounts\\n        InternalWithdrawalAmounts memory amounts = _poolWithdrawalAmounts(pool, poolTokenAmount);\\n\\n        // execute the actual withdrawal\\n        _executeWithdrawal(contextId, provider, pool, poolTokenAmount, amounts);\\n\\n        return amounts.baseTokensToTransferFromMasterVault;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function withdrawalAmounts(Token pool, uint256 poolTokenAmount)\\n        external\\n        view\\n        validAddress(address(pool))\\n        greaterThanZero(poolTokenAmount)\\n        returns (WithdrawalAmounts memory)\\n    {\\n        InternalWithdrawalAmounts memory amounts = _poolWithdrawalAmounts(pool, poolTokenAmount);\\n\\n        return\\n            WithdrawalAmounts({\\n                totalAmount: amounts.baseTokensWithdrawalAmount - amounts.baseTokensWithdrawalFee,\\n                baseTokenAmount: amounts.baseTokensToTransferFromMasterVault + amounts.baseTokensToTransferFromEPV,\\n                bntAmount: amounts.bntToMintForProvider\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradeBySourceAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount\\n    )\\n        external\\n        only(address(_network))\\n        greaterThanZero(sourceAmount)\\n        greaterThanZero(minReturnAmount)\\n        returns (TradeAmountAndFee memory)\\n    {\\n        TradeIntermediateResult memory result = _initTrade(\\n            contextId,\\n            sourceToken,\\n            targetToken,\\n            sourceAmount,\\n            minReturnAmount,\\n            true\\n        );\\n\\n        _performTrade(result);\\n\\n        return\\n            TradeAmountAndFee({\\n                amount: result.targetAmount,\\n                tradingFeeAmount: result.tradingFeeAmount,\\n                networkFeeAmount: result.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradeByTargetAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount\\n    )\\n        external\\n        only(address(_network))\\n        greaterThanZero(targetAmount)\\n        greaterThanZero(maxSourceAmount)\\n        returns (TradeAmountAndFee memory)\\n    {\\n        TradeIntermediateResult memory result = _initTrade(\\n            contextId,\\n            sourceToken,\\n            targetToken,\\n            targetAmount,\\n            maxSourceAmount,\\n            false\\n        );\\n\\n        _performTrade(result);\\n\\n        return\\n            TradeAmountAndFee({\\n                amount: result.sourceAmount,\\n                tradingFeeAmount: result.tradingFeeAmount,\\n                networkFeeAmount: result.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradeOutputAndFeeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount\\n    ) external view greaterThanZero(sourceAmount) returns (TradeAmountAndFee memory) {\\n        TradeIntermediateResult memory result = _initTrade(bytes32(0), sourceToken, targetToken, sourceAmount, 1, true);\\n\\n        _processTrade(result);\\n\\n        return\\n            TradeAmountAndFee({\\n                amount: result.targetAmount,\\n                tradingFeeAmount: result.tradingFeeAmount,\\n                networkFeeAmount: result.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function tradeInputAndFeeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount\\n    ) external view greaterThanZero(targetAmount) returns (TradeAmountAndFee memory) {\\n        TradeIntermediateResult memory result = _initTrade(\\n            bytes32(0),\\n            sourceToken,\\n            targetToken,\\n            targetAmount,\\n            type(uint256).max,\\n            false\\n        );\\n\\n        _processTrade(result);\\n\\n        return\\n            TradeAmountAndFee({\\n                amount: result.sourceAmount,\\n                tradingFeeAmount: result.tradingFeeAmount,\\n                networkFeeAmount: result.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function onFeesCollected(Token pool, uint256 feeAmount) external only(address(_network)) {\\n        if (feeAmount == 0) {\\n            return;\\n        }\\n\\n        Pool storage data = _poolStorage(pool);\\n\\n        // increase the staked balance by the given amount\\n        data.liquidity.stakedBalance += feeAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function migratePoolIn(Token pool, Pool calldata data)\\n        external\\n        validAddress(address(pool))\\n        only(address(_poolCollectionUpgrader))\\n    {\\n        _addPool(pool, data);\\n\\n        data.poolToken.acceptOwnership();\\n\\n        emit PoolMigratedIn({ token: pool });\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollection\\n     */\\n    function migratePoolOut(Token pool, IPoolCollection targetPoolCollection)\\n        external\\n        validAddress(address(targetPoolCollection))\\n        only(address(_poolCollectionUpgrader))\\n    {\\n        if (_network.latestPoolCollection(POOL_TYPE) != targetPoolCollection) {\\n            revert InvalidPoolCollection();\\n        }\\n\\n        IPoolToken cachedPoolToken = _poolData[pool].poolToken;\\n\\n        _removePool(pool);\\n\\n        cachedPoolToken.transferOwnership(address(targetPoolCollection));\\n\\n        emit PoolMigratedOut({ token: pool });\\n    }\\n\\n    /**\\n     * @dev adds a pool\\n     */\\n    function _addPool(Token pool, Pool memory data) private {\\n        if (!_pools.add(address(pool))) {\\n            revert AlreadyExists();\\n        }\\n\\n        _poolData[pool] = data;\\n    }\\n\\n    /**\\n     * @dev removes a pool\\n     */\\n    function _removePool(Token pool) private {\\n        if (!_pools.remove(address(pool))) {\\n            revert DoesNotExist();\\n        }\\n\\n        delete _poolData[pool];\\n    }\\n\\n    /**\\n     * @dev returns withdrawal amounts\\n     */\\n    function _poolWithdrawalAmounts(Token pool, uint256 poolTokenAmount)\\n        internal\\n        view\\n        returns (InternalWithdrawalAmounts memory)\\n    {\\n        Pool memory data = _poolData[pool];\\n        if (!_validPool(data)) {\\n            revert DoesNotExist();\\n        }\\n\\n        // the base token trading liquidity of a given pool can never be higher than the base token balance of the vault\\n        // whenever the base token trading liquidity is updated, it is set to at most the base token balance of the vault\\n        uint256 baseTokenExcessAmount = pool.balanceOf(address(_masterVault)) -\\n            data.liquidity.baseTokenTradingLiquidity;\\n\\n        uint256 poolTokenTotalSupply = data.poolToken.totalSupply();\\n\\n        uint256 baseTokensWithdrawalAmount = _poolTokenToUnderlying(\\n            poolTokenTotalSupply,\\n            poolTokenAmount,\\n            data.liquidity.stakedBalance\\n        );\\n\\n        PoolCollectionWithdrawal.Output memory output = PoolCollectionWithdrawal.calculateWithdrawalAmounts(\\n            data.liquidity.bntTradingLiquidity,\\n            data.liquidity.baseTokenTradingLiquidity,\\n            baseTokenExcessAmount,\\n            data.liquidity.stakedBalance,\\n            pool.balanceOf(address(_externalProtectionVault)),\\n            data.tradingFeePPM,\\n            _networkSettings.withdrawalFeePPM(),\\n            baseTokensWithdrawalAmount\\n        );\\n\\n        return\\n            InternalWithdrawalAmounts({\\n                baseTokensToTransferFromMasterVault: output.s,\\n                bntToMintForProvider: output.t,\\n                baseTokensToTransferFromEPV: output.u,\\n                baseTokensTradingLiquidityDelta: output.r,\\n                bntTradingLiquidityDelta: output.p,\\n                bntProtocolHoldingsDelta: output.q,\\n                baseTokensWithdrawalFee: output.v,\\n                baseTokensWithdrawalAmount: baseTokensWithdrawalAmount,\\n                poolTokenTotalSupply: poolTokenTotalSupply,\\n                newBaseTokenTradingLiquidity: output.r.isNeg\\n                    ? data.liquidity.baseTokenTradingLiquidity - output.r.value\\n                    : data.liquidity.baseTokenTradingLiquidity + output.r.value,\\n                newBNTTradingLiquidity: output.p.isNeg\\n                    ? data.liquidity.bntTradingLiquidity - output.p.value\\n                    : data.liquidity.bntTradingLiquidity + output.p.value\\n            });\\n    }\\n\\n    /**\\n     * @dev executes the following actions:\\n     *\\n     * - burn the network's base pool tokens\\n     * - update the pool's base token staked balance\\n     * - update the pool's base token trading liquidity\\n     * - update the pool's BNT trading liquidity\\n     * - update the pool's trading liquidity product\\n     * - emit an event if the pool's BNT trading liquidity has crossed the minimum threshold\\n     *   (either above the threshold or below the threshold)\\n     */\\n    function _executeWithdrawal(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 poolTokenAmount,\\n        InternalWithdrawalAmounts memory amounts\\n    ) private {\\n        Pool storage data = _poolStorage(pool);\\n        PoolLiquidity storage liquidity = data.liquidity;\\n        PoolLiquidity memory prevLiquidity = liquidity;\\n        AverageRate memory averageRate = data.averageRate;\\n\\n        if (_poolRateState(prevLiquidity, averageRate) == PoolRateState.Unstable) {\\n            revert RateUnstable();\\n        }\\n\\n        data.poolToken.burnFrom(address(_network), poolTokenAmount);\\n        uint256 newPoolTokenTotalSupply = amounts.poolTokenTotalSupply - poolTokenAmount;\\n\\n        liquidity.stakedBalance = MathEx.mulDivF(\\n            liquidity.stakedBalance,\\n            newPoolTokenTotalSupply,\\n            amounts.poolTokenTotalSupply\\n        );\\n\\n        liquidity.baseTokenTradingLiquidity = amounts.newBaseTokenTradingLiquidity;\\n        liquidity.bntTradingLiquidity = amounts.newBNTTradingLiquidity;\\n\\n        if (amounts.bntProtocolHoldingsDelta.value > 0) {\\n            assert(amounts.bntProtocolHoldingsDelta.isNeg); // currently no support for requesting funding here\\n\\n            _bntPool.renounceFunding(contextId, pool, amounts.bntProtocolHoldingsDelta.value);\\n        }\\n\\n        if (amounts.bntTradingLiquidityDelta.value > 0) {\\n            if (amounts.bntTradingLiquidityDelta.isNeg) {\\n                _bntPool.burnFromVault(amounts.bntTradingLiquidityDelta.value);\\n            } else {\\n                _bntPool.mint(address(_masterVault), amounts.bntTradingLiquidityDelta.value);\\n            }\\n        }\\n\\n        // if the provider should receive some BNT - ask the BNT pool to mint BNT to the provider\\n        if (amounts.bntToMintForProvider > 0) {\\n            _bntPool.mint(address(provider), amounts.bntToMintForProvider);\\n        }\\n\\n        // if the provider should receive some base tokens from the external protection vault - remove the tokens from\\n        // the external protection vault and send them to the master vault\\n        if (amounts.baseTokensToTransferFromEPV > 0) {\\n            _externalProtectionVault.withdrawFunds(\\n                pool,\\n                payable(address(_masterVault)),\\n                amounts.baseTokensToTransferFromEPV\\n            );\\n            amounts.baseTokensToTransferFromMasterVault += amounts.baseTokensToTransferFromEPV;\\n        }\\n\\n        // if the provider should receive some base tokens from the master vault - remove the tokens from the master\\n        // vault and send them to the provider\\n        if (amounts.baseTokensToTransferFromMasterVault > 0) {\\n            _masterVault.withdrawFunds(pool, payable(provider), amounts.baseTokensToTransferFromMasterVault);\\n        }\\n\\n        // ensure that the average rate is reset when the pool is being emptied\\n        if (amounts.newBaseTokenTradingLiquidity == 0) {\\n            data.averageRate.rate = zeroFraction112();\\n        }\\n\\n        // if the new BNT trading liquidity is below the minimum liquidity for trading - reset the liquidity\\n        if (amounts.newBNTTradingLiquidity < _networkSettings.minLiquidityForTrading()) {\\n            _resetTradingLiquidity(\\n                contextId,\\n                pool,\\n                data,\\n                amounts.newBNTTradingLiquidity,\\n                TRADING_STATUS_UPDATE_MIN_LIQUIDITY\\n            );\\n        }\\n\\n        emit TokenWithdrawn({\\n            contextId: contextId,\\n            token: pool,\\n            provider: provider,\\n            tokenAmount: amounts.baseTokensToTransferFromMasterVault,\\n            poolTokenAmount: poolTokenAmount,\\n            externalProtectionBaseTokenAmount: amounts.baseTokensToTransferFromEPV,\\n            bntAmount: amounts.bntToMintForProvider,\\n            withdrawalFeeAmount: amounts.baseTokensWithdrawalFee\\n        });\\n\\n        _dispatchTradingLiquidityEvents(contextId, pool, newPoolTokenTotalSupply, prevLiquidity, data.liquidity);\\n    }\\n\\n    /**\\n     * @dev sets the default trading fee (in units of PPM)\\n     */\\n    function _setDefaultTradingFeePPM(uint32 newDefaultTradingFeePPM) private {\\n        uint32 prevDefaultTradingFeePPM = _defaultTradingFeePPM;\\n        if (prevDefaultTradingFeePPM == newDefaultTradingFeePPM) {\\n            return;\\n        }\\n\\n        _defaultTradingFeePPM = newDefaultTradingFeePPM;\\n\\n        emit DefaultTradingFeePPMUpdated({ prevFeePPM: prevDefaultTradingFeePPM, newFeePPM: newDefaultTradingFeePPM });\\n    }\\n\\n    /**\\n     * @dev returns a storage reference to pool data\\n     */\\n    function _poolStorage(Token pool) private view returns (Pool storage) {\\n        Pool storage data = _poolData[pool];\\n        if (!_validPool(data)) {\\n            revert DoesNotExist();\\n        }\\n\\n        return data;\\n    }\\n\\n    /**\\n     * @dev returns whether a pool is valid\\n     */\\n    function _validPool(Pool memory pool) private pure returns (bool) {\\n        return address(pool.poolToken) != address(0);\\n    }\\n\\n    /**\\n     * @dev calculates base tokens amount\\n     */\\n    function _poolTokenToUnderlying(\\n        uint256 poolTokenSupply,\\n        uint256 poolTokenAmount,\\n        uint256 stakedBalance\\n    ) private pure returns (uint256) {\\n        if (poolTokenSupply == 0) {\\n            // if this is the initial liquidity provision - use a one-to-one pool token to base token rate\\n            if (stakedBalance > 0) {\\n                revert InvalidStakedBalance();\\n            }\\n\\n            return poolTokenAmount;\\n        }\\n\\n        return MathEx.mulDivF(poolTokenAmount, stakedBalance, poolTokenSupply);\\n    }\\n\\n    /**\\n     * @dev calculates pool tokens amount\\n     */\\n    function _underlyingToPoolToken(\\n        uint256 poolTokenSupply,\\n        uint256 tokenAmount,\\n        uint256 stakedBalance\\n    ) private pure returns (uint256) {\\n        if (poolTokenSupply == 0) {\\n            // if this is the initial liquidity provision - use a one-to-one pool token to base token rate\\n            if (stakedBalance > 0) {\\n                revert InvalidStakedBalance();\\n            }\\n\\n            return tokenAmount;\\n        }\\n\\n        return MathEx.mulDivF(tokenAmount, poolTokenSupply, stakedBalance);\\n    }\\n\\n    /**\\n     * @dev returns the target BNT trading liquidity, and whether or not it needs to be updated\\n     */\\n    function _calcTargetBNTTradingLiquidity(\\n        uint256 tokenReserveAmount,\\n        uint256 poolFundingLimit,\\n        uint256 availableFunding,\\n        PoolLiquidity memory liquidity,\\n        Fraction memory fundingRate,\\n        uint256 minLiquidityForTrading\\n    ) private pure returns (TradingLiquidityAction memory) {\\n        // calculate the target BNT trading liquidity based on the smaller between the following:\\n        // - pool funding limit (e.g., the total funding limit could have been reduced by the DAO)\\n        // - BNT liquidity required to match previously deposited based token liquidity\\n        // - maximum available BNT trading liquidity (current amount + available funding)\\n        uint256 targetBNTTradingLiquidity = Math.min(\\n            Math.min(poolFundingLimit, MathEx.mulDivF(tokenReserveAmount, fundingRate.n, fundingRate.d)),\\n            liquidity.bntTradingLiquidity + availableFunding\\n        );\\n\\n        // ensure that the target is above the minimum liquidity for trading\\n        if (targetBNTTradingLiquidity < minLiquidityForTrading) {\\n            return TradingLiquidityAction({ update: true, newAmount: 0 });\\n        }\\n\\n        // calculate the new BNT trading liquidity and cap it by the growth factor\\n        if (liquidity.bntTradingLiquidity == 0) {\\n            // if the current BNT trading liquidity is 0, set it to the minimum liquidity for trading (with an\\n            // additional buffer so that initial trades will be less likely to trigger disabling of trading)\\n            uint256 newTargetBNTTradingLiquidity = minLiquidityForTrading * BOOTSTRAPPING_LIQUIDITY_BUFFER_FACTOR;\\n\\n            // ensure that we're not allocating more than the previously established limits\\n            if (newTargetBNTTradingLiquidity > targetBNTTradingLiquidity) {\\n                return TradingLiquidityAction({ update: false, newAmount: 0 });\\n            }\\n\\n            targetBNTTradingLiquidity = newTargetBNTTradingLiquidity;\\n        } else if (targetBNTTradingLiquidity >= liquidity.bntTradingLiquidity) {\\n            // if the target is above the current trading liquidity, limit it by factoring the current value up\\n            targetBNTTradingLiquidity = Math.min(\\n                targetBNTTradingLiquidity,\\n                liquidity.bntTradingLiquidity * LIQUIDITY_GROWTH_FACTOR\\n            );\\n        } else {\\n            // if the target is below the current trading liquidity, limit it by factoring the current value down\\n            targetBNTTradingLiquidity = Math.max(\\n                targetBNTTradingLiquidity,\\n                liquidity.bntTradingLiquidity / LIQUIDITY_GROWTH_FACTOR\\n            );\\n        }\\n\\n        return TradingLiquidityAction({ update: true, newAmount: targetBNTTradingLiquidity });\\n    }\\n\\n    /**\\n     * @dev adjusts the trading liquidity based on the base token vault balance and funding limits\\n     */\\n    function _updateTradingLiquidity(\\n        bytes32 contextId,\\n        Token pool,\\n        Pool storage data,\\n        PoolLiquidity memory liquidity,\\n        Fraction memory fundingRate,\\n        uint256 minLiquidityForTrading\\n    ) private {\\n        // ensure that the base token reserve isn't empty\\n        uint256 tokenReserveAmount = pool.balanceOf(address(_masterVault));\\n        if (tokenReserveAmount == 0) {\\n            _resetTradingLiquidity(contextId, pool, data, TRADING_STATUS_UPDATE_MIN_LIQUIDITY);\\n\\n            return;\\n        }\\n\\n        if (_poolRateState(liquidity, data.averageRate) == PoolRateState.Unstable) {\\n            return;\\n        }\\n\\n        if (!fundingRate.isPositive()) {\\n            _resetTradingLiquidity(contextId, pool, data, TRADING_STATUS_UPDATE_MIN_LIQUIDITY);\\n\\n            return;\\n        }\\n\\n        TradingLiquidityAction memory action = _calcTargetBNTTradingLiquidity(\\n            tokenReserveAmount,\\n            _networkSettings.poolFundingLimit(pool),\\n            _bntPool.availableFunding(pool),\\n            liquidity,\\n            fundingRate,\\n            minLiquidityForTrading\\n        );\\n\\n        if (!action.update) {\\n            return;\\n        }\\n\\n        if (action.newAmount == 0) {\\n            _resetTradingLiquidity(contextId, pool, data, TRADING_STATUS_UPDATE_MIN_LIQUIDITY);\\n\\n            return;\\n        }\\n\\n        // update funding from the BNT pool\\n        if (action.newAmount > liquidity.bntTradingLiquidity) {\\n            _bntPool.requestFunding(contextId, pool, action.newAmount - liquidity.bntTradingLiquidity);\\n        } else if (action.newAmount < liquidity.bntTradingLiquidity) {\\n            _bntPool.renounceFunding(contextId, pool, liquidity.bntTradingLiquidity - action.newAmount);\\n        }\\n\\n        // calculate the base token trading liquidity based on the new BNT trading liquidity and the effective\\n        // funding rate (please note that the effective funding rate is always the rate between BNT and the base token)\\n        uint256 baseTokenTradingLiquidity = MathEx.mulDivF(action.newAmount, fundingRate.d, fundingRate.n);\\n\\n        // update the liquidity data of the pool\\n        PoolLiquidity memory newLiquidity = PoolLiquidity({\\n            bntTradingLiquidity: action.newAmount,\\n            baseTokenTradingLiquidity: baseTokenTradingLiquidity,\\n            stakedBalance: liquidity.stakedBalance\\n        });\\n\\n        data.liquidity = newLiquidity;\\n\\n        _dispatchTradingLiquidityEvents(contextId, pool, data.poolToken.totalSupply(), liquidity, newLiquidity);\\n    }\\n\\n    function _dispatchTradingLiquidityEvents(\\n        bytes32 contextId,\\n        Token pool,\\n        PoolLiquidity memory prevLiquidity,\\n        PoolLiquidity memory newLiquidity\\n    ) private {\\n        if (newLiquidity.bntTradingLiquidity != prevLiquidity.bntTradingLiquidity) {\\n            emit TradingLiquidityUpdated({\\n                contextId: contextId,\\n                pool: pool,\\n                token: Token(address(_bnt)),\\n                prevLiquidity: prevLiquidity.bntTradingLiquidity,\\n                newLiquidity: newLiquidity.bntTradingLiquidity\\n            });\\n        }\\n\\n        if (newLiquidity.baseTokenTradingLiquidity != prevLiquidity.baseTokenTradingLiquidity) {\\n            emit TradingLiquidityUpdated({\\n                contextId: contextId,\\n                pool: pool,\\n                token: pool,\\n                prevLiquidity: prevLiquidity.baseTokenTradingLiquidity,\\n                newLiquidity: newLiquidity.baseTokenTradingLiquidity\\n            });\\n        }\\n    }\\n\\n    function _dispatchTradingLiquidityEvents(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 poolTokenTotalSupply,\\n        PoolLiquidity memory prevLiquidity,\\n        PoolLiquidity memory newLiquidity\\n    ) private {\\n        _dispatchTradingLiquidityEvents(contextId, pool, prevLiquidity, newLiquidity);\\n\\n        if (newLiquidity.stakedBalance != prevLiquidity.stakedBalance) {\\n            emit TotalLiquidityUpdated({\\n                contextId: contextId,\\n                pool: pool,\\n                poolTokenSupply: poolTokenTotalSupply,\\n                stakedBalance: newLiquidity.stakedBalance,\\n                actualBalance: pool.balanceOf(address(_masterVault))\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @dev resets trading liquidity and renounces any remaining BNT funding\\n     */\\n    function _resetTradingLiquidity(\\n        bytes32 contextId,\\n        Token pool,\\n        Pool storage data,\\n        uint8 reason\\n    ) private {\\n        _resetTradingLiquidity(contextId, pool, data, data.liquidity.bntTradingLiquidity, reason);\\n    }\\n\\n    /**\\n     * @dev resets trading liquidity and renounces any remaining BNT funding\\n     */\\n    function _resetTradingLiquidity(\\n        bytes32 contextId,\\n        Token pool,\\n        Pool storage data,\\n        uint256 currentBNTTradingLiquidity,\\n        uint8 reason\\n    ) private {\\n        // reset the network and base token trading liquidities\\n        data.liquidity.bntTradingLiquidity = 0;\\n        data.liquidity.baseTokenTradingLiquidity = 0;\\n\\n        // reset the recent average rage\\n        data.averageRate = AverageRate({ blockNumber: 0, rate: zeroFraction112() });\\n\\n        // ensure that trading is disabled\\n        if (data.tradingEnabled) {\\n            data.tradingEnabled = false;\\n\\n            emit TradingEnabled({ pool: pool, newStatus: false, reason: reason });\\n        }\\n\\n        // renounce all network liquidity\\n        if (currentBNTTradingLiquidity > 0) {\\n            _bntPool.renounceFunding(contextId, pool, currentBNTTradingLiquidity);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns initial trading params\\n     */\\n    function _initTrade(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 amount,\\n        uint256 limit,\\n        bool bySourceAmount\\n    ) private view returns (TradeIntermediateResult memory result) {\\n        // ensure that BNT is either the source or the target token\\n        bool isSourceBNT = sourceToken.isEqual(_bnt);\\n        bool isTargetBNT = targetToken.isEqual(_bnt);\\n\\n        if (isSourceBNT && !isTargetBNT) {\\n            result.isSourceBNT = true;\\n            result.pool = targetToken;\\n        } else if (!isSourceBNT && isTargetBNT) {\\n            result.isSourceBNT = false;\\n            result.pool = sourceToken;\\n        } else {\\n            // BNT isn't one of the tokens or is both of them\\n            revert DoesNotExist();\\n        }\\n\\n        Pool memory data = _poolData[result.pool];\\n        if (!_validPool(data)) {\\n            revert DoesNotExist();\\n        }\\n\\n        // verify that trading is enabled\\n        if (!data.tradingEnabled) {\\n            revert TradingDisabled();\\n        }\\n\\n        result.contextId = contextId;\\n        result.bySourceAmount = bySourceAmount;\\n\\n        if (result.bySourceAmount) {\\n            result.sourceAmount = amount;\\n        } else {\\n            result.targetAmount = amount;\\n        }\\n\\n        result.limit = limit;\\n        result.tradingFeePPM = data.tradingFeePPM;\\n\\n        PoolLiquidity memory liquidity = data.liquidity;\\n        if (result.isSourceBNT) {\\n            result.sourceBalance = liquidity.bntTradingLiquidity;\\n            result.targetBalance = liquidity.baseTokenTradingLiquidity;\\n        } else {\\n            result.sourceBalance = liquidity.baseTokenTradingLiquidity;\\n            result.targetBalance = liquidity.bntTradingLiquidity;\\n        }\\n\\n        result.stakedBalance = liquidity.stakedBalance;\\n    }\\n\\n    /**\\n     * @dev returns trade amount and fee by providing the source amount\\n     */\\n    function _tradeAmountAndFeeBySourceAmount(\\n        uint256 sourceBalance,\\n        uint256 targetBalance,\\n        uint32 tradingFeePPM,\\n        uint256 sourceAmount\\n    ) private pure returns (TradeAmountAndTradingFee memory) {\\n        if (sourceBalance == 0 || targetBalance == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        uint256 targetAmount = MathEx.mulDivF(targetBalance, sourceAmount, sourceBalance + sourceAmount);\\n        uint256 tradingFeeAmount = MathEx.mulDivF(targetAmount, tradingFeePPM, PPM_RESOLUTION);\\n\\n        return\\n            TradeAmountAndTradingFee({ amount: targetAmount - tradingFeeAmount, tradingFeeAmount: tradingFeeAmount });\\n    }\\n\\n    /**\\n     * @dev returns trade amount and fee by providing either the target amount\\n     */\\n    function _tradeAmountAndFeeByTargetAmount(\\n        uint256 sourceBalance,\\n        uint256 targetBalance,\\n        uint32 tradingFeePPM,\\n        uint256 targetAmount\\n    ) private pure returns (TradeAmountAndTradingFee memory) {\\n        if (sourceBalance == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        uint256 tradingFeeAmount = MathEx.mulDivF(targetAmount, tradingFeePPM, PPM_RESOLUTION - tradingFeePPM);\\n        uint256 fullTargetAmount = targetAmount + tradingFeeAmount;\\n        uint256 sourceAmount = MathEx.mulDivF(sourceBalance, fullTargetAmount, targetBalance - fullTargetAmount);\\n\\n        return TradeAmountAndTradingFee({ amount: sourceAmount, tradingFeeAmount: tradingFeeAmount });\\n    }\\n\\n    /**\\n     * @dev processes a trade by providing either the source or the target amount and updates the in-memory intermediate\\n     * result\\n     */\\n    function _processTrade(TradeIntermediateResult memory result) private view {\\n        TradeAmountAndTradingFee memory tradeAmountAndFee;\\n\\n        if (result.bySourceAmount) {\\n            tradeAmountAndFee = _tradeAmountAndFeeBySourceAmount(\\n                result.sourceBalance,\\n                result.targetBalance,\\n                result.tradingFeePPM,\\n                result.sourceAmount\\n            );\\n\\n            result.targetAmount = tradeAmountAndFee.amount;\\n\\n            // ensure that the target amount is above the requested minimum return amount\\n            if (result.targetAmount < result.limit) {\\n                revert InsufficientTargetAmount();\\n            }\\n        } else {\\n            tradeAmountAndFee = _tradeAmountAndFeeByTargetAmount(\\n                result.sourceBalance,\\n                result.targetBalance,\\n                result.tradingFeePPM,\\n                result.targetAmount\\n            );\\n\\n            result.sourceAmount = tradeAmountAndFee.amount;\\n\\n            // ensure that the user has provided enough tokens to make the trade\\n            if (result.sourceAmount > result.limit) {\\n                revert InsufficientSourceAmount();\\n            }\\n        }\\n\\n        result.tradingFeeAmount = tradeAmountAndFee.tradingFeeAmount;\\n\\n        // sync the trading and staked balance\\n        result.sourceBalance += result.sourceAmount;\\n        result.targetBalance -= result.targetAmount;\\n\\n        if (result.isSourceBNT) {\\n            result.stakedBalance += result.tradingFeeAmount;\\n        }\\n\\n        _processNetworkFee(result);\\n    }\\n\\n    /**\\n     * @dev processes the network fee and updates the in-memory intermediate result\\n     */\\n    function _processNetworkFee(TradeIntermediateResult memory result) private view {\\n        uint32 networkFeePPM = _networkSettings.networkFeePPM();\\n        if (networkFeePPM == 0) {\\n            return;\\n        }\\n\\n        // calculate the target network fee amount and update the trading fee amount accordingly\\n        uint256 targetNetworkFeeAmount = MathEx.mulDivF(result.tradingFeeAmount, networkFeePPM, PPM_RESOLUTION);\\n        result.tradingFeeAmount -= targetNetworkFeeAmount;\\n\\n        if (!result.isSourceBNT) {\\n            result.networkFeeAmount = targetNetworkFeeAmount;\\n\\n            return;\\n        }\\n\\n        // trade the network fee (taken from the base token) to BNT\\n        result.networkFeeAmount = _tradeAmountAndFeeBySourceAmount(\\n            result.targetBalance,\\n            result.sourceBalance,\\n            0,\\n            targetNetworkFeeAmount\\n        ).amount;\\n\\n        // since we have received the network fee in base tokens and have traded them for BNT (so that the network fee\\n        // is always kept in BNT), we'd need to adapt the trading liquidity and the staked balance accordingly\\n        result.targetBalance += targetNetworkFeeAmount;\\n        result.sourceBalance -= result.networkFeeAmount;\\n        result.stakedBalance -= targetNetworkFeeAmount;\\n    }\\n\\n    /**\\n     * @dev performs a trade\\n     */\\n    function _performTrade(TradeIntermediateResult memory result) private {\\n        Pool storage data = _poolData[result.pool];\\n        PoolLiquidity memory prevLiquidity = data.liquidity;\\n\\n        // update the recent average rate\\n        _updateAverageRate(\\n            data,\\n            Fraction({ n: prevLiquidity.bntTradingLiquidity, d: prevLiquidity.baseTokenTradingLiquidity })\\n        );\\n\\n        _processTrade(result);\\n\\n        // sync the reserve balances and process the network fee\\n        PoolLiquidity memory newLiquidity = PoolLiquidity({\\n            bntTradingLiquidity: result.isSourceBNT ? result.sourceBalance : result.targetBalance,\\n            baseTokenTradingLiquidity: result.isSourceBNT ? result.targetBalance : result.sourceBalance,\\n            stakedBalance: result.stakedBalance\\n        });\\n\\n        _dispatchTradingLiquidityEvents(result.contextId, result.pool, prevLiquidity, newLiquidity);\\n\\n        data.liquidity = newLiquidity;\\n    }\\n\\n    /**\\n     * @dev returns the state of a pool's rate\\n     */\\n    function _poolRateState(PoolLiquidity memory liquidity, AverageRate memory averageRateInfo)\\n        internal\\n        view\\n        returns (PoolRateState)\\n    {\\n        Fraction memory spotRate = Fraction({\\n            n: liquidity.bntTradingLiquidity,\\n            d: liquidity.baseTokenTradingLiquidity\\n        });\\n\\n        Fraction112 memory averageRate = averageRateInfo.rate;\\n\\n        if (!spotRate.isPositive() || !averageRate.isPositive()) {\\n            return PoolRateState.Uninitialized;\\n        }\\n\\n        if (averageRateInfo.blockNumber != _blockNumber()) {\\n            averageRate = _calcAverageRate(averageRate, spotRate);\\n        }\\n\\n        if (MathEx.isInRange(averageRate.fromFraction112(), spotRate, RATE_MAX_DEVIATION_PPM)) {\\n            return PoolRateState.Stable;\\n        }\\n\\n        return PoolRateState.Unstable;\\n    }\\n\\n    /**\\n     * @dev updates the average rate\\n     */\\n    function _updateAverageRate(Pool storage data, Fraction memory spotRate) private {\\n        uint32 blockNumber = _blockNumber();\\n\\n        if (data.averageRate.blockNumber != blockNumber) {\\n            data.averageRate = AverageRate({\\n                blockNumber: blockNumber,\\n                rate: _calcAverageRate(data.averageRate.rate, spotRate)\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @dev calculates the average rate\\n     */\\n    function _calcAverageRate(Fraction112 memory averageRate, Fraction memory spotRate)\\n        private\\n        pure\\n        returns (Fraction112 memory)\\n    {\\n        return\\n            MathEx\\n                .weightedAverage(averageRate.fromFraction112(), spotRate, EMA_AVERAGE_RATE_WEIGHT, EMA_SPOT_RATE_WEIGHT)\\n                .toFraction112();\\n    }\\n}\\n\",\"keccak256\":\"0x231857d006eb508bda412b761f36f40a9abc5f8cbadfcc02f85002892b89dcc2\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/PoolCollectionWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { PPM_RESOLUTION as M } from \\\"../utility/Constants.sol\\\";\\nimport { Sint256, Uint512 } from \\\"../utility/Types.sol\\\";\\nimport { MathEx } from \\\"../utility/MathEx.sol\\\";\\n\\nerror PoolCollectionWithdrawalInputInvalid();\\n\\n/**\\n * @dev This library implements the mathematics behind base-token withdrawal.\\n * It exposes a single function which takes the following input values:\\n * `a` - BNT trading liquidity\\n * `b` - base token trading liquidity\\n * `c` - base token excess amount\\n * `e` - base token staked amount\\n * `w` - base token external protection vault balance\\n * `m` - trading fee in PPM units\\n * `n` - withdrawal fee in PPM units\\n * `x` - base token withdrawal amount\\n * And returns the following output values:\\n * `p` - BNT amount to add to the trading liquidity and to the master vault\\n * `q` - BNT amount to add to the protocol equity\\n * `r` - base token amount to add to the trading liquidity\\n * `s` - base token amount to transfer from the master vault to the provider\\n * `t` - BNT amount to mint directly for the provider\\n * `u` - base token amount to transfer from the external protection vault to the provider\\n * `v` - base token amount to keep in the pool as a withdrawal fee\\n * The following table depicts the actual formulae based on the current state of the system:\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * |           |                         Deficit                         |                       Surplus                            |\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * |           | p = a*x*(e*(1-n)-b-c)*(1-m)/(b*e-x*(e*(1-n)-b-c)*(1-m)) | p = -a*x*(b+c-e*(1-n))/(b*e*(1-m)+x*(b+c-e*(1-n))*(1-m)) |\\n * |           | q = 0                                                   | q = 0                                                    |\\n * |           | r = -x*(e*(1-n)-b-c)/e                                  | r = x*(b+c-e*(1-n))/e                                    |\\n * | Arbitrage | s = x*(1-n)                                             | s = x*(1-n)                                              |\\n * |           | t = 0                                                   | t = 0                                                    |\\n * |           | u = 0                                                   | u = 0                                                    |\\n * |           | v = x*n                                                 | v = x*n                                                  |\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * |           | p = -a*z/(b*e) where z = max(x*(1-n)*b-c*(e-x*(1-n)),0) | p = -a*z/b where z = max(x*(1-n)-c,0)                    |\\n * |           | q = -a*z/(b*e) where z = max(x*(1-n)*b-c*(e-x*(1-n)),0) | q = -a*z/b where z = max(x*(1-n)-c,0)                    |\\n * |           | r = -z/e       where z = max(x*(1-n)*b-c*(e-x*(1-n)),0) | r = -z     where z = max(x*(1-n)-c,0)                    |\\n * | Default   | s = x*(1-n)*(b+c)/e                                     | s = x*(1-n)                                              |\\n * |           | t = see function `externalProtection`                   | t = 0                                                    |\\n * |           | u = see function `externalProtection`                   | u = 0                                                    |\\n * |           | v = x*n                                                 | v = x*n                                                  |\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * |           | p = 0                                                   | p = 0                                                    |\\n * |           | q = 0                                                   | q = 0                                                    |\\n * |           | r = 0                                                   | r = 0                                                    |\\n * | Bootstrap | s = x*(1-n)*c/e                                         | s = x*(1-n)                                              |\\n * |           | t = see function `externalProtection`                   | t = 0                                                    |\\n * |           | u = see function `externalProtection`                   | u = 0                                                    |\\n * |           | v = x*n                                                 | v = x*n                                                  |\\n * +-----------+---------------------------------------------------------+----------------------------------------------------------+\\n * Note that for the sake of illustration, both `m` and `n` are assumed normalized (between 0 and 1).\\n * During runtime, it is taken into account that they are given in PPM units (between 0 and 1000000).\\n */\\nlibrary PoolCollectionWithdrawal {\\n    using MathEx for uint256;\\n\\n    struct Output {\\n        Sint256 p;\\n        Sint256 q;\\n        Sint256 r;\\n        uint256 s;\\n        uint256 t;\\n        uint256 u;\\n        uint256 v;\\n    }\\n\\n    /**\\n     * @dev returns `p`, `q`, `r`, `s`, `t`, `u` and `v` according to the current state:\\n     * +-------------------+-----------------------------------------------------------+\\n     * | `e > (b+c)/(1-n)` | bootstrap deficit or default deficit or arbitrage deficit |\\n     * +-------------------+-----------------------------------------------------------+\\n     * | `e < (b+c)`       | bootstrap surplus or default surplus or arbitrage surplus |\\n     * +-------------------+-----------------------------------------------------------+\\n     * | otherwise         | bootstrap surplus or default surplus                      |\\n     * +-------------------+-----------------------------------------------------------+\\n     */\\n    function calculateWithdrawalAmounts(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 c, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 w, // <= 2**128-1\\n        uint256 m, // <= M == 1000000\\n        uint256 n, // <= M == 1000000\\n        uint256 x /// <= e <= 2**128-1\\n    ) internal pure returns (Output memory output) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        validate(a <= type(uint128).max);\\n        validate(b <= type(uint128).max);\\n        validate(c <= type(uint128).max);\\n        validate(e <= type(uint128).max);\\n        validate(w <= type(uint128).max);\\n        validate(m <= M);\\n        validate(n <= M);\\n        validate(x <= e);\\n\\n        uint256 y = (x * (M - n)) / M;\\n\\n        if ((e * (M - n)) / M > b + c) {\\n            uint256 f = (e * (M - n)) / M - (b + c);\\n            uint256 g = e - (b + c);\\n            if (isStable(b, c, e, x) && affordableDeficit(b, e, f, g, m, n, x)) {\\n                output = arbitrageDeficit(a, b, e, f, m, x, y);\\n            } else if (a > 0) {\\n                output = defaultDeficit(a, b, c, e, y);\\n                (output.t, output.u) = externalProtection(a, b, e, g, y, w);\\n            } else {\\n                output.s = (y * c) / e;\\n                (output.t, output.u) = externalProtection(a, b, e, g, y, w);\\n            }\\n        } else {\\n            uint256 f = MathEx.subMax0(b + c, e);\\n            if (f > 0 && isStable(b, c, e, x) && affordableSurplus(b, e, f, m, n, x)) {\\n                output = arbitrageSurplus(a, b, e, f, m, n, x, y);\\n            } else if (a > 0) {\\n                output = defaultSurplus(a, b, c, y);\\n            } else {\\n                output.s = y;\\n            }\\n        }\\n\\n        output.v = x - y;\\n    }\\n\\n    /**\\n     * @dev returns `x < e*c/(b+c)`\\n     */\\n    function isStable(\\n        uint256 b, // <= 2**128-1\\n        uint256 c, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 x /// <= e <= 2**128-1\\n    ) private pure returns (bool) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        return b * x < c * (e - x);\\n    }\\n\\n    /**\\n     * @dev returns `b*e*((e*(1-n)-b-c)*m+e*n) > (e*(1-n)-b-c)*x*(e-b-c)*(1-m)`\\n     */\\n    function affordableDeficit(\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 f, // == e*(1-n)-b-c <= e <= 2**128-1\\n        uint256 g, // == e-b-c <= e <= 2**128-1\\n        uint256 m, // <= M == 1000000\\n        uint256 n, // <= M == 1000000\\n        uint256 x /// <  e*c/(b+c) <= e <= 2**128-1\\n    ) private pure returns (bool) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        Uint512 memory lhs = MathEx.mul512(b * e, f * m + e * n);\\n        Uint512 memory rhs = MathEx.mul512(f * x, g * (M - m));\\n        return MathEx.gt512(lhs, rhs);\\n    }\\n\\n    /**\\n     * @dev returns `b*e*((b+c-e)*m+e*n) > (b+c-e)*x*(b+c-e*(1-n))*(1-m)`\\n     */\\n    function affordableSurplus(\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 f, // == b+c-e <= 2**129-2\\n        uint256 m, // <= M == 1000000\\n        uint256 n, // <= M == 1000000\\n        uint256 x /// <  e*c/(b+c) <= e <= 2**128-1\\n    ) private pure returns (bool) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        Uint512 memory lhs = MathEx.mul512(b * e, (f * m + e * n) * M);\\n        Uint512 memory rhs = MathEx.mul512(f * x, (f * M + e * n) * (M - m));\\n        return MathEx.gt512(lhs, rhs); // `x < e*c/(b+c)` --> `f*x < e*c*(b+c-e)/(b+c) <= e*c <= 2**256-1`\\n    }\\n\\n    /**\\n     * @dev returns:\\n     * `p = a*x*(e*(1-n)-b-c)*(1-m)/(b*e-x*(e*(1-n)-b-c)*(1-m))`\\n     * `q = 0`\\n     * `r = -x*(e*(1-n)-b-c)/e`\\n     * `s = x*(1-n)`\\n     */\\n    function arbitrageDeficit(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 f, // == e*(1-n)-b-c <= e <= 2**128-1\\n        uint256 m, // <= M == 1000000\\n        uint256 x, // <= e <= 2**128-1\\n        uint256 y /// == x*(1-n) <= x <= e <= 2**128-1\\n    ) private pure returns (Output memory output) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        uint256 i = f * (M - m);\\n        uint256 j = mulSubMulDivF(b, e * M, x, i, 1);\\n        output.p = MathEx.mulDivF(a * x, i, j).toPos256();\\n        output.r = MathEx.mulDivF(x, f, e).toNeg256();\\n        output.s = y;\\n    }\\n\\n    /**\\n     * @dev returns:\\n     * `p = -a*x*(b+c-e*(1-n))/(b*e*(1-m)+x*(b+c-e*(1-n))*(1-m))`\\n     * `q = 0`\\n     * `r = x*(b+c-e*(1-n))/e`\\n     * `s = x*(1-n)`\\n     */\\n    function arbitrageSurplus(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 f, // == b+c-e <= 2**129-2\\n        uint256 m, // <= M == 1000000\\n        uint256 n, // <= M == 1000000\\n        uint256 x, // <= e <= 2**128-1\\n        uint256 y /// == x*(1-n) <= x <= e <= 2**128-1\\n    ) private pure returns (Output memory output) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        uint256 i = f * M + e * n;\\n        uint256 j = mulAddMulDivF(b, e * (M - m), x, i * (M - m), M);\\n        output.p = MathEx.mulDivF(a * x, i, j).toNeg256();\\n        output.r = MathEx.mulDivF(x, i, e * M).toPos256();\\n        output.s = y;\\n    }\\n\\n    /**\\n     * @dev returns:\\n     * `p = -a*z/(b*e)` where `z = max(x*(1-n)*b-c*(e-x*(1-n)),0)`\\n     * `q = -a*z/(b*e)` where `z = max(x*(1-n)*b-c*(e-x*(1-n)),0)`\\n     * `r = -z/e` where `z = max(x*(1-n)*b-c*(e-x*(1-n)),0)`\\n     * `s = x*(1-n)*(b+c)/e`\\n     */\\n    function defaultDeficit(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 c, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 y /// == x*(1-n) <= x <= e <= 2**128-1\\n    ) private pure returns (Output memory output) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        uint256 z = MathEx.subMax0(y * b, c * (e - y));\\n        output.p = MathEx.mulDivF(a, z, b * e).toNeg256();\\n        output.q = output.p;\\n        output.r = (z / e).toNeg256();\\n        output.s = MathEx.mulDivF(y, b + c, e);\\n    }\\n\\n    /**\\n     * @dev returns:\\n     * `p = -a*z/b` where `z = max(x*(1-n)-c,0)`\\n     * `q = -a*z/b` where `z = max(x*(1-n)-c,0)`\\n     * `r = -z` where `z = max(x*(1-n)-c,0)`\\n     * `s = x*(1-n)`\\n     */\\n    function defaultSurplus(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 c, // <= 2**128-1\\n        uint256 y /// == x*(1-n) <= x <= e <= 2**128-1\\n    ) private pure returns (Output memory output) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        uint256 z = MathEx.subMax0(y, c);\\n        output.p = MathEx.mulDivF(a, z, b).toNeg256();\\n        output.q = output.p;\\n        output.r = z.toNeg256();\\n        output.s = y;\\n    }\\n\\n    /**\\n     * @dev returns `t` and `u` according to the current state:\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | x*(1-n)*(e-b-c)/e > w | a > 0 | t                         | u                 |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | true                  | true  | a*(x*(1-n)*(e-b-c)/e-w)/b | w                 |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | true                  | false | 0                         | w                 |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | false                 | true  | 0                         | x*(1-n)*(e-b-c)/e |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     * | false                 | false | 0                         | x*(1-n)*(e-b-c)/e |\\n     * +-----------------------+-------+---------------------------+-------------------+\\n     */\\n    function externalProtection(\\n        uint256 a, // <= 2**128-1\\n        uint256 b, // <= 2**128-1\\n        uint256 e, // <= 2**128-1\\n        uint256 g, // == e-b-c <= e <= 2**128-1\\n        uint256 y, // == x*(1-n) <= x <= e <= 2**128-1\\n        uint256 w /// <= 2**128-1\\n    ) private pure returns (uint256 t, uint256 u) {\\n        // given the restrictions above, everything below can be declared `unchecked`\\n        uint256 yg = y * g;\\n        uint256 we = w * e;\\n        if (yg > we) {\\n            t = a > 0 ? MathEx.mulDivF(a, yg - we, b * e) : 0;\\n            u = w;\\n        } else {\\n            t = 0;\\n            u = yg / e;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `a*b+x*y/z`\\n     */\\n    function mulAddMulDivF(\\n        uint256 a,\\n        uint256 b,\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) private pure returns (uint256) {\\n        return a * b + MathEx.mulDivF(x, y, z);\\n    }\\n\\n    /**\\n     * @dev returns `a*b-x*y/z`\\n     */\\n    function mulSubMulDivF(\\n        uint256 a,\\n        uint256 b,\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) private pure returns (uint256) {\\n        return a * b - MathEx.mulDivF(x, y, z);\\n    }\\n\\n    /**\\n     * @dev validates the input\\n     */\\n    function validate(bool valid) private pure {\\n        if (!valid) {\\n            revert PoolCollectionWithdrawalInputInvalid();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x750e0c606925706c5c997bbbda2f44a3ac54035b23ccb62b88d06f19a4edf6f1\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IBNTPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITokenGovernance } from \\\"@bancor/token-governance/contracts/ITokenGovernance.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\nimport { IPoolCollection } from \\\"./IPoolCollection.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IBancorNetwork } from \\\"../../network/interfaces/IBancorNetwork.sol\\\";\\nimport { INetworkSettings } from \\\"../../network/interfaces/INetworkSettings.sol\\\";\\nimport { IMasterVault } from \\\"../../vaults/interfaces/IMasterVault.sol\\\";\\n\\nimport { IVault } from \\\"../../vaults/interfaces/IVault.sol\\\";\\n\\n// the BNT pool token manager role is required to access the BNT pool tokens\\nbytes32 constant ROLE_BNT_POOL_TOKEN_MANAGER = keccak256(\\\"ROLE_BNT_POOL_TOKEN_MANAGER\\\");\\n\\n// the BNT manager role is required to request the BNT pool to mint BNT\\nbytes32 constant ROLE_BNT_MANAGER = keccak256(\\\"ROLE_BNT_MANAGER\\\");\\n\\n// the vault manager role is required to request the BNT pool to burn BNT from the master vault\\nbytes32 constant ROLE_VAULT_MANAGER = keccak256(\\\"ROLE_VAULT_MANAGER\\\");\\n\\n// the funding manager role is required to request or renounce funding from the BNT pool\\nbytes32 constant ROLE_FUNDING_MANAGER = keccak256(\\\"ROLE_FUNDING_MANAGER\\\");\\n\\n/**\\n * @dev BNT Pool interface\\n */\\ninterface IBNTPool is IVault {\\n    /**\\n     * @dev returns the BNT pool token contract\\n     */\\n    function poolToken() external view returns (IPoolToken);\\n\\n    /**\\n     * @dev returns the total staked BNT balance in the network\\n     */\\n    function stakedBalance() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the current funding of given pool\\n     */\\n    function currentPoolFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the available BNT funding for a given pool\\n     */\\n    function availableFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying BNT amount\\n     */\\n    function poolTokenToUnderlying(uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying BNT amount to pool token amount\\n     */\\n    function underlyingToPoolToken(uint256 bntAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(uint256 bntAmountToDistribute) external view returns (uint256);\\n\\n    /**\\n     * @dev mints BNT to the recipient\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_BNT_MANAGER role\\n     */\\n    function mint(address recipient, uint256 bntAmount) external;\\n\\n    /**\\n     * @dev burns BNT from the vault\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_VAULT_MANAGER role\\n     */\\n    function burnFromVault(uint256 bntAmount) external;\\n\\n    /**\\n     * @dev deposits BNT liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - BNT tokens must have been already deposited into the contract\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 bntAmount,\\n        bool isMigrating,\\n        uint256 originalVBNTAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws BNT liquidity on behalf of a specific provider and returns the withdrawn BNT amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - VBNT token must have been already deposited into the contract\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 poolTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the withdrawn BNT amount\\n     */\\n    function withdrawalAmount(\\n        uint256 poolTokenAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev requests BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the request amount should be below the funding limit for a given pool\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function requestFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev renounces BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function renounceFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(\\n        Token pool,\\n        uint256 feeAmount,\\n        bool isTradeFee\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd1de7446e931aa029ad4e8832f8ad397655f7faca2aab1b594631e1d137c5cf1\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolCollection.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { Fraction, Fraction112, Sint256 } from \\\"../../utility/Types.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { INetworkSettings } from \\\"../../network/interfaces/INetworkSettings.sol\\\";\\nimport { IBancorNetwork } from \\\"../../network/interfaces/IBancorNetwork.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\nimport { IPoolTokenFactory } from \\\"./IPoolTokenFactory.sol\\\";\\nimport { IPoolCollectionUpgrader } from \\\"./IPoolCollectionUpgrader.sol\\\";\\n\\nstruct PoolLiquidity {\\n    uint256 bntTradingLiquidity; // the BNT trading liquidity\\n    uint256 baseTokenTradingLiquidity; // the base token trading liquidity\\n    uint256 stakedBalance; // the staked balance\\n}\\n\\nstruct AverageRate {\\n    uint32 blockNumber;\\n    Fraction112 rate;\\n}\\n\\nstruct Pool {\\n    IPoolToken poolToken; // the pool token of the pool\\n    uint32 tradingFeePPM; // the trading fee (in units of PPM)\\n    bool tradingEnabled; // whether trading is enabled\\n    bool depositingEnabled; // whether depositing is enabled\\n    AverageRate averageRate; // the recent average rate\\n    uint256 depositLimit; // the deposit limit\\n    PoolLiquidity liquidity; // the overall liquidity in the pool\\n}\\n\\nstruct WithdrawalAmounts {\\n    uint256 totalAmount;\\n    uint256 baseTokenAmount;\\n    uint256 bntAmount;\\n}\\n\\n// trading enabling/disabling reasons\\nuint8 constant TRADING_STATUS_UPDATE_DEFAULT = 0;\\nuint8 constant TRADING_STATUS_UPDATE_ADMIN = 1;\\nuint8 constant TRADING_STATUS_UPDATE_MIN_LIQUIDITY = 2;\\n\\nstruct TradeAmountAndFee {\\n    uint256 amount; // the source/target amount (depending on the context) resulting from the trade\\n    uint256 tradingFeeAmount; // the trading fee amount\\n    uint256 networkFeeAmount; // the network fee amount (always in units of BNT)\\n}\\n\\n/**\\n * @dev Pool Collection interface\\n */\\ninterface IPoolCollection is IVersioned {\\n    /**\\n     * @dev returns the type of the pool\\n     */\\n    function poolType() external pure returns (uint16);\\n\\n    /**\\n     * @dev returns the default trading fee (in units of PPM)\\n     */\\n    function defaultTradingFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns all the pools which are managed by this pool collection\\n     */\\n    function pools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the number of all the pools which are managed by this pool collection\\n     */\\n    function poolCount() external view returns (uint256);\\n\\n    /**\\n     * @dev returns whether a pool is valid\\n     */\\n    function isPoolValid(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns specific pool's data\\n     */\\n    function poolData(Token pool) external view returns (Pool memory);\\n\\n    /**\\n     * @dev returns the overall liquidity in the pool\\n     */\\n    function poolLiquidity(Token pool) external view returns (PoolLiquidity memory);\\n\\n    /**\\n     * @dev returns the pool token of the pool\\n     */\\n    function poolToken(Token pool) external view returns (IPoolToken);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying base token amount\\n     */\\n    function poolTokenToUnderlying(Token pool, uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying base token amount to pool token amount\\n     */\\n    function underlyingToPoolToken(Token pool, uint256 tokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(\\n        Token pool,\\n        uint256 tokenAmountToDistribute,\\n        uint256 protocolPoolTokenAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev creates a new pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the pool should have been whitelisted\\n     * - the pool isn't already defined in the collection\\n     */\\n    function createPool(Token token) external;\\n\\n    /**\\n     * @dev deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - assumes that the base token has been already deposited in the vault\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev handles some of the withdrawal-related actions and returns the withdrawn base token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the caller must have approved the collection to transfer/burn the pool token amount on its behalf\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 poolTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the amounts that would be returned if the position is currently withdrawn,\\n     * along with the breakdown of the base token and the BNT compensation\\n     */\\n    function withdrawalAmounts(\\n        Token pool,\\n        uint256 poolTokenAmount\\n    ) external view returns (WithdrawalAmounts memory);\\n\\n    /**\\n     * @dev performs a trade by providing the source amount and returns the target amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeBySourceAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev performs a trade by providing the target amount and returns the required source amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeByTargetAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the output amount and fee when trading by providing the source amount\\n     */\\n    function tradeOutputAndFeeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the input amount and fee when trading by providing the target amount\\n     */\\n    function tradeInputAndFeeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(Token pool, uint256 feeAmount) external;\\n\\n    /**\\n     * @dev migrates a pool to this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool collection upgrader contract\\n     */\\n    function migratePoolIn(Token pool, Pool calldata data) external;\\n\\n    /**\\n     * @dev migrates a pool from this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool collection upgrader contract\\n     */\\n    function migratePoolOut(Token pool, IPoolCollection targetPoolCollection) external;\\n}\\n\",\"keccak256\":\"0x43e46a96425c45b0ea9cfa4a0165642f9835ef5ec94c7447c3ea85870fc0e38b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolCollectionUpgrader.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IBancorNetwork } from \\\"../../network/interfaces/IBancorNetwork.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\n\\nimport { IPoolCollection } from \\\"./IPoolCollection.sol\\\";\\n\\n/**\\n * @dev Pool Collection Upgrader interface\\n */\\ninterface IPoolCollectionUpgrader is IVersioned {\\n    /**\\n     * @dev upgrades a pool and returns the new pool collection it exists in\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function upgradePool(Token pool) external returns (IPoolCollection);\\n}\\n\",\"keccak256\":\"0x5d5ff97f89f5966f31ab1fcfd829036ffdd08cad2f770190386eb7d3a8598b5f\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { IERC20Burnable } from \\\"../../token/interfaces/IERC20Burnable.sol\\\";\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { IOwned } from \\\"../../utility/interfaces/IOwned.sol\\\";\\n\\n/**\\n * @dev Pool Token interface\\n */\\ninterface IPoolToken is IVersioned, IOwned, IERC20, IERC20Permit, IERC20Burnable {\\n    /**\\n     * @dev returns the address of the reserve token\\n     */\\n    function reserveToken() external view returns (Token);\\n\\n    /**\\n     * @dev increases the token supply and sends the new tokens to the given account\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function mint(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x426b3d007e10756753e9405a4e546728e730b5dda3e8288947838ff07c4a9d3b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\n/**\\n * @dev Pool Token Factory interface\\n */\\ninterface IPoolTokenFactory is IUpgradeable {\\n    /**\\n     * @dev returns the custom symbol override for a given reserve token\\n     */\\n    function tokenSymbolOverride(Token token) external view returns (string memory);\\n\\n    /**\\n     * @dev returns the custom decimals override for a given reserve token\\n     */\\n    function tokenDecimalsOverride(Token token) external view returns (uint8);\\n\\n    /**\\n     * @dev creates a pool token for the specified token\\n     */\\n    function createPoolToken(Token token) external returns (IPoolToken);\\n}\\n\",\"keccak256\":\"0x5024452d3a5d7cfcda7938a01083eafdf7689a6a7d1d698c24c44471aeb0e231\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/SafeERC20Ex.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev extends the SafeERC20 library with additional operations\\n */\\nlibrary SafeERC20Ex {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     */\\n    function ensureApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance >= amount) {\\n            return;\\n        }\\n\\n        if (allowance > 0) {\\n            token.safeApprove(spender, 0);\\n        }\\n        token.safeApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6502e1d81a4451405feb16a9ea07435dda80a783d3bb4445478d2d4e6e83081b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev the main purpose of the Token interfaces is to ensure artificially that we won't use ERC20's standard functions,\\n * but only their safe versions, which are provided by SafeERC20 and SafeERC20Ex via the TokenLibrary contract\\n */\\ninterface Token {\\n\\n}\\n\",\"keccak256\":\"0x61848a718e24dd21e04a78ce0d1935e4f9b59413b01a30f14667f5455a57f8a4\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/TokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { SafeERC20Ex } from \\\"./SafeERC20Ex.sol\\\";\\n\\nimport { Token } from \\\"./Token.sol\\\";\\n\\nstruct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\n/**\\n * @dev This library implements ERC20 and SafeERC20 utilities for ETH/ERC20 tokens, which can be either ERC20 tokens\\n * or ETH\\n */\\nlibrary TokenLibrary {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20Ex for IERC20;\\n\\n    error PermitUnsupported();\\n\\n    // the address that represents the native token reserve\\n    address public constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // the symbol that represents the native token\\n    string private constant NATIVE_TOKEN_SYMBOL = \\\"ETH\\\";\\n\\n    // the decimals for the native token\\n    uint8 private constant NATIVE_TOKEN_DECIMALS = 18;\\n\\n    /**\\n     * @dev returns whether the provided token represents an ERC20 or ETH reserve\\n     */\\n    function isNative(Token token) internal pure returns (bool) {\\n        return address(token) == NATIVE_TOKEN_ADDRESS;\\n    }\\n\\n    /**\\n     * @dev returns the symbol of the ETH/ERC20 token\\n     */\\n    function symbol(Token token) internal view returns (string memory) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_SYMBOL;\\n        }\\n\\n        return toERC20(token).symbol();\\n    }\\n\\n    /**\\n     * @dev returns the decimals of the ETH/ERC20 token\\n     */\\n    function decimals(Token token) internal view returns (uint8) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_DECIMALS;\\n        }\\n\\n        return toERC20(token).decimals();\\n    }\\n\\n    /**\\n     * @dev returns the balance of the ETH/ERC20 token\\n     */\\n    function balanceOf(Token token, address account) internal view returns (uint256) {\\n        if (isNative(token)) {\\n            return account.balance;\\n        }\\n\\n        return toIERC20(token).balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the ETH/ERC20 token\\n     */\\n    function safeTransfer(\\n        Token token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isNative(token)) {\\n            payable(to).transfer(amount);\\n        } else {\\n            toIERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the ETH/ERC20 token from a specific holder using the allowance mechanism\\n     *\\n     * note that the function ignores a ETH/ERC20 token which represents an ETH reserve\\n     */\\n    function safeTransferFrom(\\n        Token token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0 || isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev approves a specific amount of the ETH/ERC20 token from a specific holder\\n     *\\n     * note that the function ignores a ETH/ERC20 token which represents an ETH reserve\\n     */\\n    function safeApprove(\\n        Token token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     *\\n     * note that this function ignores a ETH/ERC20 token which represents an ETH reserve\\n     */\\n    function ensureApprove(\\n        Token token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).ensureApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev performs an EIP2612 permit\\n     */\\n    function permit(\\n        Token token,\\n        address owner,\\n        address spender,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        Signature memory signature\\n    ) internal {\\n        if (isNative(token)) {\\n            revert PermitUnsupported();\\n        }\\n\\n        // permit the amount the owner is trying to deposit. Please note, that if the base token doesn't support\\n        // EIP2612 permit - either this call or the inner safeTransferFrom will revert\\n        IERC20Permit(address(token)).permit(\\n            owner,\\n            spender,\\n            tokenAmount,\\n            deadline,\\n            signature.v,\\n            signature.r,\\n            signature.s\\n        );\\n    }\\n\\n    /**\\n     * @dev compares between a token and another raw ERC20 token\\n     */\\n    function isEqual(Token token, IERC20 erc20Token) internal pure returns (bool) {\\n        return toIERC20(token) == erc20Token;\\n    }\\n\\n    /**\\n     * @dev utility function that converts an token to an IERC20\\n     */\\n    function toIERC20(Token token) internal pure returns (IERC20) {\\n        return IERC20(address(token));\\n    }\\n\\n    /**\\n     * @dev utility function that converts an token to an ERC20\\n     */\\n    function toERC20(Token token) internal pure returns (ERC20) {\\n        return ERC20(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x2866054061dee7b4b9e5f8daa3acb180de0b6b992d04cbe27714fca9f368c445\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev burnable ERC20 interface\\n */\\ninterface IERC20Burnable {\\n    /**\\n     * @dev Destroys tokens from the caller.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys tokens from a recipient, deducting from the caller's allowance\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have allowance for recipient's tokens of at least the specified amount\\n     */\\n    function burnFrom(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb1f2e4e75b796385923ad2b259579efc64b743324d575cbefb6e90cb3ed920fc\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/BlockNumber.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev this contract abstracts the block number in order to allow for more flexible control in tests\\n */\\ncontract BlockNumber {\\n    /**\\n     * @dev returns the current block-number\\n     */\\n    function _blockNumber() internal view virtual returns (uint32) {\\n        return uint32(block.number);\\n    }\\n}\\n\",\"keccak256\":\"0xecbfb259f720971835cb0610d4584c11c02c83ff91d9521ce0ee421f7c631bd1\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nuint32 constant PPM_RESOLUTION = 1000000;\\n\",\"keccak256\":\"0x655a21079ece74dbfb5bdad2219a1dde7720a13764597e00939d7450db641256\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/FractionLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { Fraction, Fraction112 } from \\\"./Types.sol\\\";\\nimport { MathEx } from \\\"./MathEx.sol\\\";\\n\\n// solhint-disable-next-line func-visibility\\nfunction zeroFraction() pure returns (Fraction memory) {\\n    return Fraction({ n: 0, d: 1 });\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction zeroFraction112() pure returns (Fraction112 memory) {\\n    return Fraction112({ n: 0, d: 1 });\\n}\\n\\n/**\\n * @dev this library provides a set of fraction operations\\n */\\nlibrary FractionLibrary {\\n    /**\\n     * @dev returns whether a standard fraction is valid\\n     */\\n    function isValid(Fraction memory fraction) internal pure returns (bool) {\\n        return fraction.d != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a standard fraction is positive\\n     */\\n    function isPositive(Fraction memory fraction) internal pure returns (bool) {\\n        return isValid(fraction) && fraction.n != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a 112-bit fraction is valid\\n     */\\n    function isValid(Fraction112 memory fraction) internal pure returns (bool) {\\n        return fraction.d != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a 112-bit fraction is positive\\n     */\\n    function isPositive(Fraction112 memory fraction) internal pure returns (bool) {\\n        return isValid(fraction) && fraction.n != 0;\\n    }\\n\\n    /**\\n     * @dev reduces a standard fraction to a 112-bit fraction\\n     */\\n    function toFraction112(Fraction memory fraction) internal pure returns (Fraction112 memory) {\\n        Fraction memory reducedFraction = MathEx.reducedFraction(fraction, type(uint112).max);\\n        return Fraction112({ n: uint112(reducedFraction.n), d: uint112(reducedFraction.d) });\\n    }\\n\\n    /**\\n     * @dev expands a 112-bit fraction to a standard fraction\\n     */\\n    function fromFraction112(Fraction112 memory fraction) internal pure returns (Fraction memory) {\\n        return Fraction({ n: fraction.n, d: fraction.d });\\n    }\\n}\\n\",\"keccak256\":\"0x1b69b24d81d796b6418d38cbe6357e8e89b00e85411f0d07f189b8b96317b55a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/MathEx.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Fraction, Uint512, Sint256 } from \\\"./Types.sol\\\";\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nuint256 constant ONE = 1 << 127;\\n\\n/**\\n * @dev this library provides a set of complex math operations\\n */\\nlibrary MathEx {\\n    error Overflow();\\n\\n    /**\\n     * @dev returns `e ^ f`, where `e` is Euler's number and `f` is the input exponent:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function exp(Fraction memory f) internal pure returns (Fraction memory) {\\n        uint256 x = MathEx.mulDivF(ONE, f.n, f.d);\\n        uint256 y;\\n        uint256 z;\\n        uint256 n;\\n\\n        if (x >= (ONE << 4)) {\\n            revert Overflow();\\n        }\\n\\n        unchecked {\\n            z = y = x % (ONE >> 3); // get the input modulo 2^(-3)\\n            z = (z * y) / ONE;\\n            n += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\\n            z = (z * y) / ONE;\\n            n += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\\n            z = (z * y) / ONE;\\n            n += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\\n            z = (z * y) / ONE;\\n            n += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\\n            z = (z * y) / ONE;\\n            n += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000000001c638; // add y^16 * (20! / 16!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000000000017c; // add y^18 * (20! / 18!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000000014; // add y^19 * (20! / 19!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000000001; // add y^20 * (20! / 20!)\\n            n = n / 0x21c3677c82b40000 + y + ONE; // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n            if ((x & (ONE >> 3)) != 0)\\n                n = (n * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\\n            if ((x & (ONE >> 2)) != 0)\\n                n = (n * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\\n            if ((x & (ONE >> 1)) != 0)\\n                n = (n * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\\n            if ((x & (ONE << 0)) != 0)\\n                n = (n * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\\n            if ((x & (ONE << 1)) != 0)\\n                n = (n * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\\n            if ((x & (ONE << 2)) != 0)\\n                n = (n * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\\n            if ((x & (ONE << 3)) != 0)\\n                n = (n * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\\n        }\\n\\n        return Fraction({ n: n, d: ONE });\\n    }\\n\\n    /**\\n     * @dev returns a fraction with reduced components\\n     */\\n    function reducedFraction(Fraction memory fraction, uint256 max) internal pure returns (Fraction memory) {\\n        uint256 scale = Math.ceilDiv(Math.max(fraction.n, fraction.d), max);\\n        return Fraction({ n: fraction.n / scale, d: fraction.d / scale });\\n    }\\n\\n    /**\\n     * @dev returns the weighted average of two fractions\\n     */\\n    function weightedAverage(\\n        Fraction memory fraction1,\\n        Fraction memory fraction2,\\n        uint256 weight1,\\n        uint256 weight2\\n    ) internal pure returns (Fraction memory) {\\n        return\\n            Fraction({\\n                n: fraction1.n * fraction2.d * weight1 + fraction1.d * fraction2.n * weight2,\\n                d: fraction1.d * fraction2.d * (weight1 + weight2)\\n            });\\n    }\\n\\n    /**\\n     * @dev returns whether or not the deviation of an offset sample from a base sample is within a permitted range\\n     * for example, if the maximum permitted deviation is 5%, then evaluate `95% * base <= offset <= 105% * base`\\n     */\\n    function isInRange(\\n        Fraction memory baseSample,\\n        Fraction memory offsetSample,\\n        uint32 maxDeviationPPM\\n    ) internal pure returns (bool) {\\n        Uint512 memory min = mul512(baseSample.n, offsetSample.d * (PPM_RESOLUTION - maxDeviationPPM));\\n        Uint512 memory mid = mul512(baseSample.d, offsetSample.n * PPM_RESOLUTION);\\n        Uint512 memory max = mul512(baseSample.n, offsetSample.d * (PPM_RESOLUTION + maxDeviationPPM));\\n        return lte512(min, mid) && lte512(mid, max);\\n    }\\n\\n    /**\\n     * @dev returns an `Sint256` positive representation of an unsigned integer\\n     */\\n    function toPos256(uint256 n) internal pure returns (Sint256 memory) {\\n        return Sint256({ value: n, isNeg: false });\\n    }\\n\\n    /**\\n     * @dev returns an `Sint256` negative representation of an unsigned integer\\n     */\\n    function toNeg256(uint256 n) internal pure returns (Sint256 memory) {\\n        return Sint256({ value: n, isNeg: true });\\n    }\\n\\n    /**\\n     * @dev returns the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        Uint512 memory xy = mul512(x, y);\\n\\n        // if `x * y < 2 ^ 256`\\n        if (xy.hi == 0) {\\n            return xy.lo / z;\\n        }\\n\\n        // assert `x * y / z < 2 ^ 256`\\n        if (xy.hi >= z) {\\n            revert Overflow();\\n        }\\n\\n        uint256 m = _mulMod(x, y, z); // `m = x * y % z`\\n        Uint512 memory n = _sub512(xy, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n\\n        // if `n < 2 ^ 256`\\n        if (n.hi == 0) {\\n            return n.lo / z;\\n        }\\n\\n        uint256 p = _unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n        uint256 q = _div512(n, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n        uint256 r = _inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n        return _unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n    }\\n\\n    /**\\n     * @dev returns the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        uint256 w = mulDivF(x, y, z);\\n        if (_mulMod(x, y, z) > 0) {\\n            if (w >= type(uint256).max) {\\n                revert Overflow();\\n            }\\n\\n            return w + 1;\\n        }\\n        return w;\\n    }\\n\\n    /**\\n     * @dev returns the maximum of `n1 - n2` and 0\\n     */\\n    function subMax0(uint256 n1, uint256 n2) internal pure returns (uint256) {\\n        return n1 > n2 ? n1 - n2 : 0;\\n    }\\n\\n    /**\\n     * @dev returns the value of `x > y`\\n     */\\n    function gt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi > y.hi || (x.hi == y.hi && x.lo > y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x < y`\\n     */\\n    function lt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi < y.hi || (x.hi == y.hi && x.lo < y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x >= y`\\n     */\\n    function gte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !lt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x <= y`\\n     */\\n    function lte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !gt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y) internal pure returns (Uint512 memory) {\\n        uint256 p = _mulModMax(x, y);\\n        uint256 q = _unsafeMul(x, y);\\n        if (p >= q) {\\n            return Uint512({ hi: p - q, lo: q });\\n        }\\n        return Uint512({ hi: _unsafeSub(p, q) - 1, lo: q });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x - y`, given that `x >= y`\\n     */\\n    function _sub512(Uint512 memory x, uint256 y) private pure returns (Uint512 memory) {\\n        if (x.lo >= y) {\\n            return Uint512({ hi: x.hi, lo: x.lo - y });\\n        }\\n        return Uint512({ hi: x.hi - 1, lo: _unsafeSub(x.lo, y) });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x / pow2n`, given that `x` is divisible by `pow2n`\\n     */\\n    function _div512(Uint512 memory x, uint256 pow2n) private pure returns (uint256) {\\n        uint256 pow2nInv = _unsafeAdd(_unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n        return _unsafeMul(x.hi, pow2nInv) | (x.lo / pow2n); // `(x.hi << (256 - n)) | (x.lo >> n)`\\n    }\\n\\n    /**\\n     * @dev returns the inverse of `d` modulo `2 ^ 256`, given that `d` is congruent to `1` modulo `2`\\n     */\\n    function _inv256(uint256 d) private pure returns (uint256) {\\n        // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n        uint256 x = 1;\\n        for (uint256 i = 0; i < 8; i++) {\\n            x = _unsafeMul(x, _unsafeSub(2, _unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @dev returns `(x + y) % 2 ^ 256`\\n     */\\n    function _unsafeAdd(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x + y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x - y) % 2 ^ 256`\\n     */\\n    function _unsafeSub(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x - y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x * y) % 2 ^ 256`\\n     */\\n    function _unsafeMul(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x * y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `x * y % (2 ^ 256 - 1)`\\n     */\\n    function _mulModMax(uint256 x, uint256 y) private pure returns (uint256) {\\n        return mulmod(x, y, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev returns `x * y % z`\\n     */\\n    function _mulMod(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) private pure returns (uint256) {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x5a4575a8a06025f6e4e07580a93cfd51963a542a92c19533f80fe3e95ce670c9\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IOwned } from \\\"./interfaces/IOwned.sol\\\";\\nimport { AccessDenied } from \\\"./Utils.sol\\\";\\n\\n/**\\n * @dev this contract provides support and utilities for contract ownership\\n */\\nabstract contract Owned is IOwned {\\n    error SameOwner();\\n\\n    address private _owner;\\n    address private _newOwner;\\n\\n    /**\\n     * @dev triggered when the owner is updated\\n     */\\n    event OwnerUpdate(address indexed prevOwner, address indexed newOwner);\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    // allows execution by the owner only\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _onlyOwner() private view {\\n        if (msg.sender != _owner) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IOwned\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @inheritdoc IOwned\\n     */\\n    function transferOwnership(address ownerCandidate) public virtual onlyOwner {\\n        if (ownerCandidate == _owner) {\\n            revert SameOwner();\\n        }\\n\\n        _newOwner = ownerCandidate;\\n    }\\n\\n    /**\\n     * @inheritdoc IOwned\\n     */\\n    function acceptOwnership() public virtual {\\n        if (msg.sender != _newOwner) {\\n            revert AccessDenied();\\n        }\\n\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev returns the address of the new owner candidate\\n     */\\n    function newOwner() external view returns (address) {\\n        return _newOwner;\\n    }\\n\\n    /**\\n     * @dev sets the new owner internally\\n     */\\n    function _transferOwnership(address ownerCandidate) private {\\n        address prevOwner = _owner;\\n\\n        _owner = ownerCandidate;\\n        _newOwner = address(0);\\n\\n        emit OwnerUpdate({ prevOwner: prevOwner, newOwner: ownerCandidate });\\n    }\\n}\\n\",\"keccak256\":\"0x22ff9968718bcc5b8565ffef1e7b16b351a01f83b156cfc997f88bd13ff685a2\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Types.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nstruct Fraction {\\n    uint256 n; // numerator\\n    uint256 d; // denominator\\n}\\n\\nstruct Fraction112 {\\n    uint112 n; // numerator\\n    uint112 d; // denominator\\n}\\n\\nstruct Uint512 {\\n    uint256 hi; // 256 most significant bits\\n    uint256 lo; // 256 least significant bits\\n}\\n\\nstruct Sint256 {\\n    uint256 value;\\n    bool isNeg;\\n}\\n\",\"keccak256\":\"0xd6652f9eaa29ce431458e4bcf748518dfaef8693806ef52022736acef2a1fb5b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nerror AccessDenied();\\nerror AlreadyExists();\\nerror DoesNotExist();\\nerror InvalidAddress();\\nerror InvalidExternalAddress();\\nerror InvalidFee();\\nerror InvalidPool();\\nerror InvalidPoolCollection();\\nerror InvalidPortion();\\nerror InvalidStakedBalance();\\nerror InvalidToken();\\nerror InvalidType();\\nerror NotEmpty();\\nerror NotPayable();\\nerror ZeroValue();\\n\\n/**\\n * @dev common utilities\\n */\\ncontract Utils {\\n    // allows execution by the caller only\\n    modifier only(address caller) {\\n        _only(caller);\\n\\n        _;\\n    }\\n\\n    function _only(address caller) internal view {\\n        if (msg.sender != caller) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    // ensures that the portion is valid\\n    modifier validPortion(uint32 _portion) {\\n        _validPortion(_portion);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validPortion(uint32 _portion) internal pure {\\n        if (_portion == 0 || _portion > PPM_RESOLUTION) {\\n            revert InvalidPortion();\\n        }\\n    }\\n\\n    // validates an external address - currently only checks that it isn't null or this\\n    modifier validExternalAddress(address addr) {\\n        _validExternalAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validExternalAddress(address addr) internal view {\\n        if (addr == address(0) || addr == address(this)) {\\n            revert InvalidExternalAddress();\\n        }\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        if (fee > PPM_RESOLUTION) {\\n            revert InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0d70eb04c8187a3852b7ca51db7fbd5cc8ffca507abd2b70205d9dd8a2189fd\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev Owned interface\\n */\\ninterface IOwned {\\n    /**\\n     * @dev returns the address of the current owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev allows transferring the contract ownership\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     * - the new owner still needs to accept the transfer\\n     */\\n    function transferOwnership(address ownerCandidate) external;\\n\\n    /**\\n     * @dev used by a new owner to accept an ownership transfer\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x1932c450ce91848052c82a2ad5538c660d31d85784e2100fe6312e070bbb1454\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IVersioned } from \\\"./IVersioned.sol\\\";\\n\\nimport { IAccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @dev this is the common interface for upgradeable contracts\\n */\\ninterface IUpgradeable is IAccessControlEnumerableUpgradeable, IVersioned {\\n\\n}\\n\",\"keccak256\":\"0x47c7fcbf7226ecb2e26f9eeb05ce66153bfca0cef4d624d6e7a3ff3b919288a4\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev an interface for a versioned contract\\n */\\ninterface IVersioned {\\n    function version() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x70f0e99e5ad11d5323430a9ee46d844b7cd59b1ace6d0c89dcb08a5c1e112674\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IExternalProtectionVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IExternalProtectionVault is IVault {}\\n\",\"keccak256\":\"0xa5a36a75ca9c56f6a93a382035d9c5ed29d6b55102acf9e69bd05785dbe4e6ba\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IMasterVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IMasterVault is IVault {}\\n\",\"keccak256\":\"0x917f544e15881083251c45fcb5bab0a50646ecc434cc06a892169444d310aa04\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\n// the asset manager role is required to access all the funds\\nbytes32 constant ROLE_ASSET_MANAGER = keccak256(\\\"ROLE_ASSET_MANAGER\\\");\\n\\ninterface IVault is IUpgradeable {\\n    /**\\n     * @dev triggered when tokens have been withdrawn from the vault\\n     */\\n    event FundsWithdrawn(Token indexed token, address indexed caller, address indexed target, uint256 amount);\\n\\n    /**\\n     * @dev triggered when tokens have been burned from the vault\\n     */\\n    event FundsBurned(Token indexed token, address indexed caller, uint256 amount);\\n\\n    /**\\n     * @dev tells if the contracts accepts ETH deposits\\n     */\\n    function isPayable() external view returns (bool);\\n\\n    /**\\n     * @dev withdraws funds held by the contract and sends them to an account\\n     */\\n    function withdrawFunds(\\n        Token token,\\n        address payable target,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev burns funds held by the contract\\n     */\\n    function burn(Token token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0849e1f860182d74cbb49564b69809be25cfd4a3ec5d9e41b6931f5d20b0d81b\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Pool Collection contract notes: - the address of reserve token serves as the pool unique ID in both contract functions and events",
    "events": {
      "DefaultTradingFeePPMUpdated(uint32,uint32)": {
        "details": "triggered when the default trading fee is updated"
      },
      "DepositLimitUpdated(address,uint256,uint256)": {
        "details": "triggered when a pool's deposit limit is updated"
      },
      "DepositingEnabled(address,bool)": {
        "details": "triggered when depositing into a specific pool is enabled/disabled"
      },
      "PoolCreated(address,address)": {
        "details": "triggered when a pool is created"
      },
      "PoolMigratedIn(address)": {
        "details": "triggered when a pool is migrated into this pool collection"
      },
      "PoolMigratedOut(address)": {
        "details": "triggered when a pool is migrated out of this pool collection"
      },
      "TokenDeposited(bytes32,address,address,uint256,uint256)": {
        "details": "triggered when new liquidity is deposited into a pool"
      },
      "TokenWithdrawn(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "triggered when existing liquidity is withdrawn from a pool"
      },
      "TotalLiquidityUpdated(bytes32,address,uint256,uint256,uint256)": {
        "details": "triggered when the total liquidity in a pool is updated"
      },
      "TradingEnabled(address,bool,uint8)": {
        "details": "triggered when trading in a specific pool is enabled/disabled"
      },
      "TradingFeePPMUpdated(address,uint32,uint32)": {
        "details": "triggered when a specific pool's trading fee is updated"
      },
      "TradingLiquidityUpdated(bytes32,address,address,uint256,uint256)": {
        "details": "triggered when the trading liquidity in a pool is updated"
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "used by a new owner to accept an ownership transfer"
      },
      "constructor": {
        "details": "initializes a new PoolCollection contract"
      },
      "createPool(address)": {
        "details": "creates a new pool requirements: - the caller must be the network contract - the pool should have been whitelisted - the pool isn't already defined in the collection"
      },
      "defaultTradingFeePPM()": {
        "details": "returns the default trading fee (in units of PPM)"
      },
      "depositFor(bytes32,address,address,uint256)": {
        "details": "deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount requirements: - the caller must be the network contract - assumes that the base token has been already deposited in the vault"
      },
      "disableTrading(address)": {
        "details": "disables trading in a given pool requirements: - the caller must be the owner of the contract"
      },
      "enableDepositing(address,bool)": {
        "details": "enables/disables depositing into a given pool requirements: - the caller must be the owner of the contract"
      },
      "enableTrading(address,uint256,uint256)": {
        "details": "enables trading in a given pool, by providing the funding rate as two virtual balances, and updates its trading liquidity requirements: - the caller must be the owner of the contract"
      },
      "isPoolValid(address)": {
        "details": "returns whether a pool is valid"
      },
      "migratePoolIn(address,(address,uint32,bool,bool,(uint32,(uint112,uint112)),uint256,(uint256,uint256,uint256)))": {
        "details": "migrates a pool to this pool collection requirements: - the caller must be the pool collection upgrader contract"
      },
      "migratePoolOut(address,address)": {
        "details": "migrates a pool from this pool collection requirements: - the caller must be the pool collection upgrader contract"
      },
      "newOwner()": {
        "details": "returns the address of the new owner candidate"
      },
      "onFeesCollected(address,uint256)": {
        "details": "notifies the pool of accrued fees requirements: - the caller must be the network contract"
      },
      "owner()": {
        "details": "returns the address of the current owner"
      },
      "poolCount()": {
        "details": "returns the number of all the pools which are managed by this pool collection"
      },
      "poolData(address)": {
        "details": "returns specific pool's data"
      },
      "poolLiquidity(address)": {
        "details": "returns the overall liquidity in the pool"
      },
      "poolToken(address)": {
        "details": "returns the pool token of the pool"
      },
      "poolTokenAmountToBurn(address,uint256,uint256)": {
        "details": "returns the number of pool token to burn in order to increase everyone's underlying value by the specified amount"
      },
      "poolTokenToUnderlying(address,uint256)": {
        "details": "converts the specified pool token amount to the underlying base token amount"
      },
      "poolType()": {
        "details": "returns the type of the pool"
      },
      "pools()": {
        "details": "returns all the pools which are managed by this pool collection"
      },
      "setDefaultTradingFeePPM(uint32)": {
        "details": "sets the default trading fee (in units of PPM) requirements: - the caller must be the owner of the contract"
      },
      "setDepositLimit(address,uint256)": {
        "details": "sets the deposit limit of a given pool requirements: - the caller must be the owner of the contract"
      },
      "setTradingFeePPM(address,uint32)": {
        "details": "sets the trading fee of a given pool requirements: - the caller must be the owner of the contract"
      },
      "tradeBySourceAmount(bytes32,address,address,uint256,uint256)": {
        "details": "performs a trade by providing the source amount and returns the target amount and the associated fee requirements: - the caller must be the network contract"
      },
      "tradeByTargetAmount(bytes32,address,address,uint256,uint256)": {
        "details": "performs a trade by providing the target amount and returns the required source amount and the associated fee requirements: - the caller must be the network contract"
      },
      "tradeInputAndFeeByTargetAmount(address,address,uint256)": {
        "details": "returns the input amount and fee when trading by providing the target amount"
      },
      "tradeOutputAndFeeBySourceAmount(address,address,uint256)": {
        "details": "returns the output amount and fee when trading by providing the source amount"
      },
      "transferOwnership(address)": {
        "details": "allows transferring the contract ownership requirements: - the caller must be the owner of the contract - the new owner still needs to accept the transfer"
      },
      "underlyingToPoolToken(address,uint256)": {
        "details": "converts the specified underlying base token amount to pool token amount"
      },
      "withdraw(bytes32,address,address,uint256)": {
        "details": "handles some of the withdrawal-related actions and returns the withdrawn base token amount requirements: - the caller must be the network contract - the caller must have approved the collection to transfer/burn the pool token amount on its behalf"
      },
      "withdrawalAmounts(address,uint256)": {
        "details": "returns the amounts that would be returned if the position is currently withdrawn, along with the breakdown of the base token and the BNT compensation"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30138,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 30140,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18836,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_poolData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(Token)28365,t_struct(Pool)24048_storage)"
      },
      {
        "astId": 18839,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_pools",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)6215_storage"
      },
      {
        "astId": 18841,
        "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
        "label": "_defaultTradingFeePPM",
        "offset": 0,
        "slot": "5",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPoolToken)24386": {
        "encoding": "inplace",
        "label": "contract IPoolToken",
        "numberOfBytes": "20"
      },
      "t_contract(Token)28365": {
        "encoding": "inplace",
        "label": "contract Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(Token)28365,t_struct(Pool)24048_storage)": {
        "encoding": "mapping",
        "key": "t_contract(Token)28365",
        "label": "mapping(contract Token => struct Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)24048_storage"
      },
      "t_struct(AddressSet)6215_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6214,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5914_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AverageRate)24030_storage": {
        "encoding": "inplace",
        "label": "struct AverageRate",
        "members": [
          {
            "astId": 24026,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 24029,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fraction112)30424_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Fraction112)30424_storage": {
        "encoding": "inplace",
        "label": "struct Fraction112",
        "members": [
          {
            "astId": 30421,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "n",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 30423,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "d",
            "offset": 14,
            "slot": "0",
            "type": "t_uint112"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Pool)24048_storage": {
        "encoding": "inplace",
        "label": "struct Pool",
        "members": [
          {
            "astId": 24033,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "poolToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IPoolToken)24386"
          },
          {
            "astId": 24035,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "tradingFeePPM",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 24037,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "tradingEnabled",
            "offset": 24,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 24039,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "depositingEnabled",
            "offset": 25,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 24042,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "averageRate",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(AverageRate)24030_storage"
          },
          {
            "astId": 24044,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "depositLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 24047,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "liquidity",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(PoolLiquidity)24024_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(PoolLiquidity)24024_storage": {
        "encoding": "inplace",
        "label": "struct PoolLiquidity",
        "members": [
          {
            "astId": 24019,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "bntTradingLiquidity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24021,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "baseTokenTradingLiquidity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24023,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "stakedBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5914_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5909,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5913,
            "contract": "contracts/pools/PoolCollection.sol:PoolCollection",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}