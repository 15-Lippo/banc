{
  "address": "0xE6C67aeEA87ef2aF3A161C26C7E1707eb11afB05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBancorNetwork",
          "name": "initNetwork",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolCollection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedVersion",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPoolCollection",
          "name": "prevPoolCollection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPoolCollection",
          "name": "newPoolCollection",
          "type": "address"
        }
      ],
      "name": "PoolUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "upgradePool",
      "outputs": [
        {
          "internalType": "contract IPoolCollection",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x537bc21e58d4c136c323e56d2295b36936d9eb66cb4d97a90ab31197194f8a20",
  "receipt": {
    "to": null,
    "from": "0xdfeE8DC240c6CadC2c7f7f9c257c259914dEa84E",
    "contractAddress": "0xE6C67aeEA87ef2aF3A161C26C7E1707eb11afB05",
    "transactionIndex": 0,
    "gasUsed": "1233411",
    "logsBloom": "0x
    "blockHash": "0x11fbb31cbd8fc6203de4aca567ee0541b85cf50970506f1faec81319ad96724b",
    "transactionHash": "0x537bc21e58d4c136c323e56d2295b36936d9eb66cb4d97a90ab31197194f8a20",
    "logs": [],
    "blockNumber": 14406059,
    "cumulativeGasUsed": "1233411",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x093C761bd5B8f71d72cBC74A72cc9c6aEDC8EE49"
  ],
  "numDeployments": 1,
  "solcInputHash": "dcea142469df7f75d330e08f80ea8523",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBancorNetwork\",\"name\":\"initNetwork\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPoolCollection\",\"name\":\"prevPoolCollection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPoolCollection\",\"name\":\"newPoolCollection\",\"type\":\"address\"}],\"name\":\"PoolUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"upgradePool\",\"outputs\":[{\"internalType\":\"contract IPoolCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Pool Collection Upgrader contract\",\"events\":{\"PoolUpgraded(address,address,address)\":{\"details\":\"triggered when an existing pool is upgraded\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"a \\\"virtual\\\" constructor that is only used to set immutable state variables\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize()\":{\"details\":\"fully initializes the contract and its parents\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"roleAdmin()\":{\"details\":\"returns the admin role\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradePool(address)\":{\"details\":\"upgrades a pool and returns the new pool collection it exists in notes: - invalid or incompatible pools will be skipped gracefully requirements: - the caller must be the network contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/PoolCollectionUpgrader.sol\":\"PoolCollectionUpgrader\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@bancor/token-governance/contracts/IClaimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n/// @title Claimable contract interface\\ninterface IClaimable {\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x52c14ec7eac845d8ca8b3acb46bdf913e6ede14f4e8887f61dc35f93399e2962\",\"license\":\"MIT\"},\"@bancor/token-governance/contracts/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IClaimable.sol\\\";\\n\\n/// @title Mintable Token interface\\ninterface IMintableToken is IERC20, IClaimable {\\n    function issue(address to, uint256 amount) external;\\n\\n    function destroy(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x87ddb17ba18575515a97f615a84225bdb1fdf756eeae626287b94b2a3517a93b\",\"license\":\"MIT\"},\"@bancor/token-governance/contracts/ITokenGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"./IMintableToken.sol\\\";\\n\\n/// @title The interface for mintable/burnable token governance.\\ninterface ITokenGovernance {\\n    // The address of the mintable ERC20 token.\\n    function token() external view returns (IMintableToken);\\n\\n    /// @dev Mints new tokens.\\n    ///\\n    /// @param to Account to receive the new amount.\\n    /// @param amount Amount to increase the supply by.\\n    ///\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @dev Burns tokens from the caller.\\n    ///\\n    /// @param amount Amount to decrease the supply by.\\n    ///\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xebcf7997ed758d71a551597c3f7874b2b2fd91a72bbe50c634b02506f04e95b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"contracts/network/interfaces/IBancorNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITokenGovernance } from \\\"@bancor/token-governance/contracts/ITokenGovernance.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\nimport { IExternalProtectionVault } from \\\"../../vaults/interfaces/IExternalProtectionVault.sol\\\";\\nimport { IMasterVault } from \\\"./../../vaults/interfaces/IMasterVault.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IPoolCollection } from \\\"../../pools/interfaces/IPoolCollection.sol\\\";\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\nimport { IBNTPool } from \\\"../../pools/interfaces/IBNTPool.sol\\\";\\nimport { IPoolCollectionUpgrader } from \\\"../../pools/interfaces/IPoolCollectionUpgrader.sol\\\";\\n\\nimport { INetworkSettings } from \\\"./INetworkSettings.sol\\\";\\nimport { IPendingWithdrawals } from \\\"./IPendingWithdrawals.sol\\\";\\n\\n/**\\n * @dev Flash-loan recipient interface\\n */\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev a flash-loan recipient callback after each the caller must return the borrowed amount and an additional fee\\n     */\\n    function onFlashLoan(\\n        address caller,\\n        IERC20 erc20Token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        bytes memory data\\n    ) external;\\n}\\n\\n/**\\n * @dev Bancor Network interface\\n */\\ninterface IBancorNetwork is IUpgradeable {\\n    /**\\n     * @dev returns the set of all valid pool collections\\n     */\\n    function poolCollections() external view returns (IPoolCollection[] memory);\\n\\n    /**\\n     * @dev returns the most recent collection that was added to the pool collections set for a specific type\\n     */\\n    function latestPoolCollection(uint16 poolType) external view returns (IPoolCollection);\\n\\n    /**\\n     * @dev returns the set of all liquidity pools\\n     */\\n    function liquidityPools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the respective pool collection for the provided pool\\n     */\\n    function collectionByPool(Token pool) external view returns (IPoolCollection);\\n\\n    /**\\n     * @dev returns whether the pool is valid\\n     */\\n    function isPoolValid(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev creates a new pool\\n     *\\n     * requirements:\\n     *\\n     * - the pool doesn't exist\\n     */\\n    function createPool(uint16 poolType, Token token) external;\\n\\n    /**\\n     * @dev upgrades a list of pools\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     */\\n    function upgradePools(Token[] calldata pools) external;\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (ETH is handled separately)\\n     */\\n    function depositFor(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity for the current provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (ETH is handled separately)\\n     */\\n    function deposit(Token pool, uint256 tokenAmount) external payable returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider by providing an EIP712 typed signature for an EIP2612 permit\\n     * request and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function depositForPermitted(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity by providing an EIP712 typed signature for an EIP2612 permit request and returns the\\n     * respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function depositPermitted(\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws liquidity and returns the withdrawn amount\\n     *\\n     * requirements:\\n     *\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     * - the specified withdrawal request is eligible for completion\\n     * - the provider must have approved the network to transfer VBNT amount on its behalf, when withdrawing BNT\\n     * liquidity\\n     */\\n    function withdraw(uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf, in the non-ETH case\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable;\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount and providing an EIP712 typed signature for an\\n     * EIP2612 permit request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function tradeBySourceAmountPermitted(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf, in the non-ETH case\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable;\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount and providing an EIP712 typed signature for an\\n     * EIP2612 permit request and returns the target amount and fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function tradeByTargetAmountPermitted(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev provides a flash-loan\\n     *\\n     * requirements:\\n     *\\n     * - the recipient's callback must return *at least* the borrowed amount and fee back to the specified return address\\n     */\\n    function flashLoan(\\n        Token token,\\n        uint256 amount,\\n        IFlashLoanRecipient recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the contract to transfer the pool token amount on its behalf\\n     */\\n    function initWithdrawal(IPoolToken poolToken, uint256 poolTokenAmount) external returns (uint256);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal by providing an EIP712 typed signature for an EIP2612 permit request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function initWithdrawalPermitted(\\n        IPoolToken poolToken,\\n        uint256 poolTokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev cancels a withdrawal request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have already initiated a withdrawal and received the specified id\\n     */\\n    function cancelWithdrawal(uint256 id) external;\\n\\n    /**\\n     * @dev deposits liquidity during a migration\\n     */\\n    function migrateLiquidity(\\n        Token token,\\n        address provider,\\n        uint256 amount,\\n        uint256 availableAmount,\\n        uint256 originalAmount\\n    ) external payable;\\n\\n    /**\\n     * @dev withdraws pending network fees\\n     *\\n     * requirements:\\n     *\\n     * - * - the caller must have the ROLE_NETWORK_FEE_MANAGER privilege\\n     */\\n    function withdrawNetworkFees(address recipient) external;\\n}\\n\",\"keccak256\":\"0xdbfe2244e920b2207b0f94147f6e15a969a9705f79e05c131dea13aa96c5fa70\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/INetworkSettings.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nerror NotWhitelisted();\\n\\nstruct VortexRewards {\\n    // the percentage of converted BNT to be sent to the initiator of the burning event (in units of PPM)\\n    uint32 burnRewardPPM;\\n    // the maximum burn reward to be sent to the initiator of the burning event\\n    uint256 burnRewardMaxAmount;\\n}\\n\\n/**\\n * @dev Network Settings interface\\n */\\ninterface INetworkSettings is IUpgradeable {\\n    /**\\n     * @dev returns the protected tokens whitelist\\n     */\\n    function protectedTokenWhitelist() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev checks whether a given token is whitelisted\\n     */\\n    function isTokenWhitelisted(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns the BNT funding limit for a given pool\\n     */\\n    function poolFundingLimit(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the minimum BNT trading liquidity required before the system enables trading in the relevant pool\\n     */\\n    function minLiquidityForTrading() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the global network fee (in units of PPM)\\n     *\\n     * notes:\\n     *\\n     * - the network fee is a portion of the total fees from each pool\\n     */\\n    function networkFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the withdrawal fee (in units of PPM)\\n     */\\n    function withdrawalFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the flash-loan fee (in units of PPM)\\n     */\\n    function flashLoanFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the vortex settings\\n     */\\n    function vortexRewards() external view returns (VortexRewards memory);\\n}\\n\",\"keccak256\":\"0x0f8ba78e0bda7375f59540018ca132181c992a16f6e4237cbce47efd161931d5\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/IPendingWithdrawals.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\nimport { IBNTPool } from \\\"../../pools/interfaces/IBNTPool.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { INetworkSettings } from \\\"./INetworkSettings.sol\\\";\\nimport { IBancorNetwork } from \\\"./IBancorNetwork.sol\\\";\\n\\n/**\\n * @dev the data struct representing a pending withdrawal request\\n */\\nstruct WithdrawalRequest {\\n    address provider; // the liquidity provider\\n    IPoolToken poolToken; // the locked pool token\\n    Token reserveToken; // the reserve token to withdraw\\n    uint32 createdAt; // the time when the request was created (Unix timestamp))\\n    uint256 poolTokenAmount; // the locked pool token amount\\n    uint256 reserveTokenAmount; // the expected reserve token amount to withdraw\\n}\\n\\n/**\\n * @dev the data struct representing a completed withdrawal request\\n */\\nstruct CompletedWithdrawal {\\n    IPoolToken poolToken; // the transferred pool token\\n    uint256 poolTokenAmount; // the transferred pool token amount\\n}\\n\\n/**\\n * @dev Pending Withdrawals interface\\n */\\ninterface IPendingWithdrawals is IUpgradeable {\\n    /**\\n     * @dev returns the lock duration\\n     */\\n    function lockDuration() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the pending withdrawal requests count for a specific provider\\n     */\\n    function withdrawalRequestCount(address provider) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the pending withdrawal requests IDs for a specific provider\\n     */\\n    function withdrawalRequestIds(address provider) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev returns the pending withdrawal request with the specified ID\\n     */\\n    function withdrawalRequest(uint256 id) external view returns (WithdrawalRequest memory);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function initWithdrawal(\\n        address provider,\\n        IPoolToken poolToken,\\n        uint256 poolTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev cancels a withdrawal request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     */\\n    function cancelWithdrawal(address provider, uint256 id) external;\\n\\n    /**\\n     * @dev completes a withdrawal request and returns the pool token and its transferred amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     * - the lock duration has ended\\n     */\\n    function completeWithdrawal(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 id\\n    ) external returns (CompletedWithdrawal memory);\\n\\n    /**\\n     * @dev returns whether the given request is ready for withdrawal\\n     */\\n    function isReadyForWithdrawal(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2cb05fb05596b304df7708065b885892fcfff050c8c5c7e5fdac56afbed3d365\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/PoolCollectionUpgrader.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IBancorNetwork } from \\\"../network/interfaces/IBancorNetwork.sol\\\";\\n\\nimport { Pool, PoolLiquidity, IPoolCollection, AverageRate } from \\\"./interfaces/IPoolCollection.sol\\\";\\nimport { IPoolToken } from \\\"./interfaces/IPoolToken.sol\\\";\\nimport { IPoolCollectionUpgrader } from \\\"./interfaces/IPoolCollectionUpgrader.sol\\\";\\n\\nimport { IVersioned } from \\\"../utility/interfaces/IVersioned.sol\\\";\\nimport { Fraction } from \\\"../utility/Types.sol\\\";\\nimport { Upgradeable } from \\\"../utility/Upgradeable.sol\\\";\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { Utils, InvalidPool, InvalidPoolCollection } from \\\"../utility/Utils.sol\\\";\\n\\ninterface IPoolCollectionBase {\\n    function migratePoolOut(Token pool, IPoolCollection targetPoolCollection) external;\\n}\\n\\ninterface IPoolCollectionV1 is IPoolCollectionBase {\\n    struct PoolLiquidityV1 {\\n        uint256 bntTradingLiquidity; // the BNT trading liquidity\\n        uint256 baseTokenTradingLiquidity; // the base token trading liquidity\\n        uint256 stakedBalance; // the staked balance\\n    }\\n\\n    struct PoolV1 {\\n        IPoolToken poolToken; // the pool token of a given pool\\n        uint32 tradingFeePPM; // the trading fee (in units of PPM)\\n        bool tradingEnabled; // whether trading is enabled\\n        bool depositingEnabled; // whether depositing is enabled\\n        AverageRate averageRate; // the recent average rate\\n        uint256 depositLimit; // the deposit limit\\n        PoolLiquidityV1 liquidity; // the overall liquidity in the pool\\n    }\\n\\n    function poolData(Token token) external view returns (PoolV1 memory);\\n}\\n\\n/**\\n * @dev Pool Collection Upgrader contract\\n */\\ncontract PoolCollectionUpgrader is IPoolCollectionUpgrader, Upgradeable, Utils {\\n    error UnsupportedVersion();\\n\\n    IPoolCollection private constant INVALID_POOL_COLLECTION = IPoolCollection(address(0));\\n\\n    // the network contract\\n    IBancorNetwork private immutable _network;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 0] private __gap;\\n\\n    /**\\n     * @dev triggered when an existing pool is upgraded\\n     */\\n    event PoolUpgraded(Token indexed pool, IPoolCollection prevPoolCollection, IPoolCollection newPoolCollection);\\n\\n    /**\\n     * @dev a \\\"virtual\\\" constructor that is only used to set immutable state variables\\n     */\\n    constructor(IBancorNetwork initNetwork) validAddress(address(initNetwork)) {\\n        _network = initNetwork;\\n    }\\n\\n    /**\\n     * @dev fully initializes the contract and its parents\\n     */\\n    function initialize() external initializer {\\n        __PoolCollectionUpgrader_init();\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __PoolCollectionUpgrader_init() internal onlyInitializing {\\n        __Upgradeable_init();\\n\\n        __PoolCollectionUpgrader_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __PoolCollectionUpgrader_init_unchained() internal onlyInitializing {}\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    /**\\n     * @inheritdoc IVersioned\\n     */\\n    function version() external pure returns (uint16) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolCollectionUpgrader\\n     */\\n    function upgradePool(Token pool) external only(address(_network)) returns (IPoolCollection) {\\n        if (address(pool) == address(0)) {\\n            revert InvalidPool();\\n        }\\n\\n        // get the pool collection that this pool exists in\\n        IPoolCollection prevPoolCollection = _network.collectionByPool(pool);\\n        if (address(prevPoolCollection) == address(0)) {\\n            revert InvalidPool();\\n        }\\n\\n        // get the latest pool collection corresponding to its type and ensure that an upgrade is necessary. Please\\n        // note that it's currently not possible to add two pool collections with the same version or type\\n        uint16 poolType = prevPoolCollection.poolType();\\n        IPoolCollection newPoolCollection = _network.latestPoolCollection(poolType);\\n        if (address(newPoolCollection) == address(prevPoolCollection)) {\\n            revert InvalidPoolCollection();\\n        }\\n\\n        // migrate all relevant values based on a historical collection version into the new pool collection\\n        if (prevPoolCollection.version() == 1) {\\n            _upgradeFromV1(pool, IPoolCollectionV1(address(prevPoolCollection)), newPoolCollection);\\n\\n            emit PoolUpgraded({\\n                pool: pool,\\n                prevPoolCollection: prevPoolCollection,\\n                newPoolCollection: newPoolCollection\\n            });\\n\\n            return newPoolCollection;\\n        }\\n\\n        revert UnsupportedVersion();\\n    }\\n\\n    /**\\n     * @dev upgrades a V1 pool to the latest pool version\\n     */\\n    function _upgradeFromV1(\\n        Token pool,\\n        IPoolCollectionV1 sourcePoolCollection,\\n        IPoolCollection targetPoolCollection\\n    ) private {\\n        IPoolCollectionV1.PoolV1 memory data = sourcePoolCollection.poolData(pool);\\n\\n        // since the latest pool collection is also v1, currently not additional pre- or post-processing is needed\\n        Pool memory newData = Pool({\\n            poolToken: data.poolToken,\\n            tradingFeePPM: data.tradingFeePPM,\\n            tradingEnabled: data.tradingEnabled,\\n            depositingEnabled: data.depositingEnabled,\\n            averageRate: data.averageRate,\\n            depositLimit: data.depositLimit,\\n            liquidity: PoolLiquidity({\\n                bntTradingLiquidity: data.liquidity.bntTradingLiquidity,\\n                baseTokenTradingLiquidity: data.liquidity.baseTokenTradingLiquidity,\\n                stakedBalance: data.liquidity.stakedBalance\\n            })\\n        });\\n\\n        sourcePoolCollection.migratePoolOut(pool, targetPoolCollection);\\n        targetPoolCollection.migratePoolIn(pool, newData);\\n    }\\n}\\n\",\"keccak256\":\"0x29c070b3eb59dfac37593986d19b4e02b0419a9f5631966fab171671975e2c27\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IBNTPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITokenGovernance } from \\\"@bancor/token-governance/contracts/ITokenGovernance.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\nimport { IPoolCollection } from \\\"./IPoolCollection.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IBancorNetwork } from \\\"../../network/interfaces/IBancorNetwork.sol\\\";\\nimport { INetworkSettings } from \\\"../../network/interfaces/INetworkSettings.sol\\\";\\nimport { IMasterVault } from \\\"../../vaults/interfaces/IMasterVault.sol\\\";\\n\\nimport { IVault } from \\\"../../vaults/interfaces/IVault.sol\\\";\\n\\n// the BNT pool token manager role is required to access the BNT pool tokens\\nbytes32 constant ROLE_BNT_POOL_TOKEN_MANAGER = keccak256(\\\"ROLE_BNT_POOL_TOKEN_MANAGER\\\");\\n\\n// the BNT manager role is required to request the BNT pool to mint BNT\\nbytes32 constant ROLE_BNT_MANAGER = keccak256(\\\"ROLE_BNT_MANAGER\\\");\\n\\n// the vault manager role is required to request the BNT pool to burn BNT from the master vault\\nbytes32 constant ROLE_VAULT_MANAGER = keccak256(\\\"ROLE_VAULT_MANAGER\\\");\\n\\n// the funding manager role is required to request or renounce funding from the BNT pool\\nbytes32 constant ROLE_FUNDING_MANAGER = keccak256(\\\"ROLE_FUNDING_MANAGER\\\");\\n\\n/**\\n * @dev BNT Pool interface\\n */\\ninterface IBNTPool is IVault {\\n    /**\\n     * @dev returns the BNT pool token contract\\n     */\\n    function poolToken() external view returns (IPoolToken);\\n\\n    /**\\n     * @dev returns the total staked BNT balance in the network\\n     */\\n    function stakedBalance() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the current funding of given pool\\n     */\\n    function currentPoolFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the available BNT funding for a given pool\\n     */\\n    function availableFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying BNT amount\\n     */\\n    function poolTokenToUnderlying(uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying BNT amount to pool token amount\\n     */\\n    function underlyingToPoolToken(uint256 bntAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(uint256 bntAmountToDistribute) external view returns (uint256);\\n\\n    /**\\n     * @dev mints BNT to the recipient\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_BNT_MANAGER role\\n     */\\n    function mint(address recipient, uint256 bntAmount) external;\\n\\n    /**\\n     * @dev burns BNT from the vault\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_VAULT_MANAGER role\\n     */\\n    function burnFromVault(uint256 bntAmount) external;\\n\\n    /**\\n     * @dev deposits BNT liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - BNT tokens must have been already deposited into the contract\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 bntAmount,\\n        bool isMigrating,\\n        uint256 originalVBNTAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws BNT liquidity on behalf of a specific provider and returns the withdrawn BNT amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - VBNT token must have been already deposited into the contract\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 poolTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the withdrawn BNT amount\\n     */\\n    function withdrawalAmount(\\n        uint256 poolTokenAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev requests BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the request amount should be below the funding limit for a given pool\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function requestFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev renounces BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function renounceFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(\\n        Token pool,\\n        uint256 feeAmount,\\n        bool isTradeFee\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd1de7446e931aa029ad4e8832f8ad397655f7faca2aab1b594631e1d137c5cf1\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolCollection.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { Fraction, Fraction112, Sint256 } from \\\"../../utility/Types.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { INetworkSettings } from \\\"../../network/interfaces/INetworkSettings.sol\\\";\\nimport { IBancorNetwork } from \\\"../../network/interfaces/IBancorNetwork.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\nimport { IPoolTokenFactory } from \\\"./IPoolTokenFactory.sol\\\";\\nimport { IPoolCollectionUpgrader } from \\\"./IPoolCollectionUpgrader.sol\\\";\\n\\nstruct PoolLiquidity {\\n    uint256 bntTradingLiquidity; // the BNT trading liquidity\\n    uint256 baseTokenTradingLiquidity; // the base token trading liquidity\\n    uint256 stakedBalance; // the staked balance\\n}\\n\\nstruct AverageRate {\\n    uint32 blockNumber;\\n    Fraction112 rate;\\n}\\n\\nstruct Pool {\\n    IPoolToken poolToken; // the pool token of the pool\\n    uint32 tradingFeePPM; // the trading fee (in units of PPM)\\n    bool tradingEnabled; // whether trading is enabled\\n    bool depositingEnabled; // whether depositing is enabled\\n    AverageRate averageRate; // the recent average rate\\n    uint256 depositLimit; // the deposit limit\\n    PoolLiquidity liquidity; // the overall liquidity in the pool\\n}\\n\\nstruct WithdrawalAmounts {\\n    uint256 totalAmount;\\n    uint256 baseTokenAmount;\\n    uint256 bntAmount;\\n}\\n\\n// trading enabling/disabling reasons\\nuint8 constant TRADING_STATUS_UPDATE_DEFAULT = 0;\\nuint8 constant TRADING_STATUS_UPDATE_ADMIN = 1;\\nuint8 constant TRADING_STATUS_UPDATE_MIN_LIQUIDITY = 2;\\n\\nstruct TradeAmountAndFee {\\n    uint256 amount; // the source/target amount (depending on the context) resulting from the trade\\n    uint256 tradingFeeAmount; // the trading fee amount\\n    uint256 networkFeeAmount; // the network fee amount (always in units of BNT)\\n}\\n\\n/**\\n * @dev Pool Collection interface\\n */\\ninterface IPoolCollection is IVersioned {\\n    /**\\n     * @dev returns the type of the pool\\n     */\\n    function poolType() external pure returns (uint16);\\n\\n    /**\\n     * @dev returns the default trading fee (in units of PPM)\\n     */\\n    function defaultTradingFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns all the pools which are managed by this pool collection\\n     */\\n    function pools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the number of all the pools which are managed by this pool collection\\n     */\\n    function poolCount() external view returns (uint256);\\n\\n    /**\\n     * @dev returns whether a pool is valid\\n     */\\n    function isPoolValid(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns specific pool's data\\n     */\\n    function poolData(Token pool) external view returns (Pool memory);\\n\\n    /**\\n     * @dev returns the overall liquidity in the pool\\n     */\\n    function poolLiquidity(Token pool) external view returns (PoolLiquidity memory);\\n\\n    /**\\n     * @dev returns the pool token of the pool\\n     */\\n    function poolToken(Token pool) external view returns (IPoolToken);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying base token amount\\n     */\\n    function poolTokenToUnderlying(Token pool, uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying base token amount to pool token amount\\n     */\\n    function underlyingToPoolToken(Token pool, uint256 tokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(\\n        Token pool,\\n        uint256 tokenAmountToDistribute,\\n        uint256 protocolPoolTokenAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev creates a new pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the pool should have been whitelisted\\n     * - the pool isn't already defined in the collection\\n     */\\n    function createPool(Token token) external;\\n\\n    /**\\n     * @dev deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - assumes that the base token has been already deposited in the vault\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev handles some of the withdrawal-related actions and returns the withdrawn base token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the caller must have approved the collection to transfer/burn the pool token amount on its behalf\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 poolTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the amounts that would be returned if the position is currently withdrawn,\\n     * along with the breakdown of the base token and the BNT compensation\\n     */\\n    function withdrawalAmounts(\\n        Token pool,\\n        uint256 poolTokenAmount\\n    ) external view returns (WithdrawalAmounts memory);\\n\\n    /**\\n     * @dev performs a trade by providing the source amount and returns the target amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeBySourceAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev performs a trade by providing the target amount and returns the required source amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeByTargetAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the output amount and fee when trading by providing the source amount\\n     */\\n    function tradeOutputAndFeeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the input amount and fee when trading by providing the target amount\\n     */\\n    function tradeInputAndFeeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(Token pool, uint256 feeAmount) external;\\n\\n    /**\\n     * @dev migrates a pool to this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool collection upgrader contract\\n     */\\n    function migratePoolIn(Token pool, Pool calldata data) external;\\n\\n    /**\\n     * @dev migrates a pool from this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool collection upgrader contract\\n     */\\n    function migratePoolOut(Token pool, IPoolCollection targetPoolCollection) external;\\n}\\n\",\"keccak256\":\"0x43e46a96425c45b0ea9cfa4a0165642f9835ef5ec94c7447c3ea85870fc0e38b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolCollectionUpgrader.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IBancorNetwork } from \\\"../../network/interfaces/IBancorNetwork.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\n\\nimport { IPoolCollection } from \\\"./IPoolCollection.sol\\\";\\n\\n/**\\n * @dev Pool Collection Upgrader interface\\n */\\ninterface IPoolCollectionUpgrader is IVersioned {\\n    /**\\n     * @dev upgrades a pool and returns the new pool collection it exists in\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function upgradePool(Token pool) external returns (IPoolCollection);\\n}\\n\",\"keccak256\":\"0x5d5ff97f89f5966f31ab1fcfd829036ffdd08cad2f770190386eb7d3a8598b5f\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { IERC20Burnable } from \\\"../../token/interfaces/IERC20Burnable.sol\\\";\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { IOwned } from \\\"../../utility/interfaces/IOwned.sol\\\";\\n\\n/**\\n * @dev Pool Token interface\\n */\\ninterface IPoolToken is IVersioned, IOwned, IERC20, IERC20Permit, IERC20Burnable {\\n    /**\\n     * @dev returns the address of the reserve token\\n     */\\n    function reserveToken() external view returns (Token);\\n\\n    /**\\n     * @dev increases the token supply and sends the new tokens to the given account\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function mint(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x426b3d007e10756753e9405a4e546728e730b5dda3e8288947838ff07c4a9d3b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\n/**\\n * @dev Pool Token Factory interface\\n */\\ninterface IPoolTokenFactory is IUpgradeable {\\n    /**\\n     * @dev returns the custom symbol override for a given reserve token\\n     */\\n    function tokenSymbolOverride(Token token) external view returns (string memory);\\n\\n    /**\\n     * @dev returns the custom decimals override for a given reserve token\\n     */\\n    function tokenDecimalsOverride(Token token) external view returns (uint8);\\n\\n    /**\\n     * @dev creates a pool token for the specified token\\n     */\\n    function createPoolToken(Token token) external returns (IPoolToken);\\n}\\n\",\"keccak256\":\"0x5024452d3a5d7cfcda7938a01083eafdf7689a6a7d1d698c24c44471aeb0e231\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev the main purpose of the Token interfaces is to ensure artificially that we won't use ERC20's standard functions,\\n * but only their safe versions, which are provided by SafeERC20 and SafeERC20Ex via the TokenLibrary contract\\n */\\ninterface Token {\\n\\n}\\n\",\"keccak256\":\"0x61848a718e24dd21e04a78ce0d1935e4f9b59413b01a30f14667f5455a57f8a4\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev burnable ERC20 interface\\n */\\ninterface IERC20Burnable {\\n    /**\\n     * @dev Destroys tokens from the caller.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys tokens from a recipient, deducting from the caller's allowance\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have allowance for recipient's tokens of at least the specified amount\\n     */\\n    function burnFrom(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb1f2e4e75b796385923ad2b259579efc64b743324d575cbefb6e90cb3ed920fc\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nuint32 constant PPM_RESOLUTION = 1000000;\\n\",\"keccak256\":\"0x655a21079ece74dbfb5bdad2219a1dde7720a13764597e00939d7450db641256\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Types.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nstruct Fraction {\\n    uint256 n; // numerator\\n    uint256 d; // denominator\\n}\\n\\nstruct Fraction112 {\\n    uint112 n; // numerator\\n    uint112 d; // denominator\\n}\\n\\nstruct Uint512 {\\n    uint256 hi; // 256 most significant bits\\n    uint256 lo; // 256 least significant bits\\n}\\n\\nstruct Sint256 {\\n    uint256 value;\\n    bool isNeg;\\n}\\n\",\"keccak256\":\"0xd6652f9eaa29ce431458e4bcf748518dfaef8693806ef52022736acef2a1fb5b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport { IUpgradeable } from \\\"./interfaces/IUpgradeable.sol\\\";\\n\\nimport { AccessDenied } from \\\"./Utils.sol\\\";\\n\\n/**\\n * @dev this contract provides common utilities for upgradeable contracts\\n */\\nabstract contract Upgradeable is IUpgradeable, AccessControlEnumerableUpgradeable {\\n    // the admin role is used to allow a non-proxy admin to perform additional initialization/setup during contract\\n    // upgrades\\n    bytes32 internal constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n\\n    uint32 internal constant MAX_GAP = 50;\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __Upgradeable_init() internal onlyInitializing {\\n        __AccessControl_init();\\n\\n        __Upgradeable_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __Upgradeable_init_unchained() internal onlyInitializing {\\n        // set up administrative roles\\n        _setRoleAdmin(ROLE_ADMIN, ROLE_ADMIN);\\n\\n        // allow the deployer to initially be the admin of the contract\\n        _setupRole(ROLE_ADMIN, msg.sender);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    modifier onlyAdmin() {\\n        _hasRole(ROLE_ADMIN, msg.sender);\\n\\n        _;\\n    }\\n\\n    modifier onlyRoleMember(bytes32 role) {\\n        _hasRole(role, msg.sender);\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev returns the admin role\\n     */\\n    function roleAdmin() external pure returns (bytes32) {\\n        return ROLE_ADMIN;\\n    }\\n\\n    function _hasRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x82f3243a037abaf9ae06a73bdd2959dc9c4b94e75c6c1074050ae4039432bd39\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nerror AccessDenied();\\nerror AlreadyExists();\\nerror DoesNotExist();\\nerror InvalidAddress();\\nerror InvalidExternalAddress();\\nerror InvalidFee();\\nerror InvalidPool();\\nerror InvalidPoolCollection();\\nerror InvalidPortion();\\nerror InvalidStakedBalance();\\nerror InvalidToken();\\nerror InvalidType();\\nerror NotEmpty();\\nerror NotPayable();\\nerror ZeroValue();\\n\\n/**\\n * @dev common utilities\\n */\\ncontract Utils {\\n    // allows execution by the caller only\\n    modifier only(address caller) {\\n        _only(caller);\\n\\n        _;\\n    }\\n\\n    function _only(address caller) internal view {\\n        if (msg.sender != caller) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    // ensures that the portion is valid\\n    modifier validPortion(uint32 _portion) {\\n        _validPortion(_portion);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validPortion(uint32 _portion) internal pure {\\n        if (_portion == 0 || _portion > PPM_RESOLUTION) {\\n            revert InvalidPortion();\\n        }\\n    }\\n\\n    // validates an external address - currently only checks that it isn't null or this\\n    modifier validExternalAddress(address addr) {\\n        _validExternalAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validExternalAddress(address addr) internal view {\\n        if (addr == address(0) || addr == address(this)) {\\n            revert InvalidExternalAddress();\\n        }\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        if (fee > PPM_RESOLUTION) {\\n            revert InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0d70eb04c8187a3852b7ca51db7fbd5cc8ffca507abd2b70205d9dd8a2189fd\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev Owned interface\\n */\\ninterface IOwned {\\n    /**\\n     * @dev returns the address of the current owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev allows transferring the contract ownership\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     * - the new owner still needs to accept the transfer\\n     */\\n    function transferOwnership(address ownerCandidate) external;\\n\\n    /**\\n     * @dev used by a new owner to accept an ownership transfer\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x1932c450ce91848052c82a2ad5538c660d31d85784e2100fe6312e070bbb1454\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IVersioned } from \\\"./IVersioned.sol\\\";\\n\\nimport { IAccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @dev this is the common interface for upgradeable contracts\\n */\\ninterface IUpgradeable is IAccessControlEnumerableUpgradeable, IVersioned {\\n\\n}\\n\",\"keccak256\":\"0x47c7fcbf7226ecb2e26f9eeb05ce66153bfca0cef4d624d6e7a3ff3b919288a4\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev an interface for a versioned contract\\n */\\ninterface IVersioned {\\n    function version() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x70f0e99e5ad11d5323430a9ee46d844b7cd59b1ace6d0c89dcb08a5c1e112674\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IExternalProtectionVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IExternalProtectionVault is IVault {}\\n\",\"keccak256\":\"0xa5a36a75ca9c56f6a93a382035d9c5ed29d6b55102acf9e69bd05785dbe4e6ba\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IMasterVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IMasterVault is IVault {}\\n\",\"keccak256\":\"0x917f544e15881083251c45fcb5bab0a50646ecc434cc06a892169444d310aa04\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.12;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\n// the asset manager role is required to access all the funds\\nbytes32 constant ROLE_ASSET_MANAGER = keccak256(\\\"ROLE_ASSET_MANAGER\\\");\\n\\ninterface IVault is IUpgradeable {\\n    /**\\n     * @dev triggered when tokens have been withdrawn from the vault\\n     */\\n    event FundsWithdrawn(Token indexed token, address indexed caller, address indexed target, uint256 amount);\\n\\n    /**\\n     * @dev triggered when tokens have been burned from the vault\\n     */\\n    event FundsBurned(Token indexed token, address indexed caller, uint256 amount);\\n\\n    /**\\n     * @dev tells if the contracts accepts ETH deposits\\n     */\\n    function isPayable() external view returns (bool);\\n\\n    /**\\n     * @dev withdraws funds held by the contract and sends them to an account\\n     */\\n    function withdrawFunds(\\n        Token token,\\n        address payable target,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev burns funds held by the contract\\n     */\\n    function burn(Token token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0849e1f860182d74cbb49564b69809be25cfd4a3ec5d9e41b6931f5d20b0d81b\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161161f38038061161f83398101604081905261002f91610075565b806100398161004b565b506001600160a01b03166080526100a5565b6001600160a01b0381166100725760405163e6c4247b60e01b815260040160405180910390fd5b50565b60006020828403121561008757600080fd5b81516001600160a01b038116811461009e57600080fd5b9392505050565b6080516115516100ce600039600081816103f901528181610469015261058901526115516000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639010d07c1161008c578063a217fddf11610066578063a217fddf146101d0578063a2ff484f146101d8578063ca15c873146101eb578063d547741f146101fe57600080fd5b80639010d07c1461016c57806391d148541461019757806393867fb5146101aa57600080fd5b806301ffc9a7146100d4578063248a9ca3146100fc5780632f2ff15d1461012d57806336568abe1461014257806354fd4d50146101555780638129fc1c14610164575b600080fd5b6100e76100e2366004610fa3565b610211565b60405190151581526020015b60405180910390f35b61011f61010a366004610fcd565b60009081526065602052604090206001015490565b6040519081526020016100f3565b61014061013b366004610ffb565b61023c565b005b610140610150366004610ffb565b610267565b604051600181526020016100f3565b6101406102ea565b61017f61017a36600461102b565b6103ab565b6040516001600160a01b0390911681526020016100f3565b6100e76101a5366004610ffb565b6103ca565b7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509661011f565b61011f600081565b61017f6101e636600461104d565b6103f5565b61011f6101f9366004610fcd565b610712565b61014061020c366004610ffb565b610729565b60006001600160e01b03198216635a05180f60e01b148061023657506102368261074f565b92915050565b6000828152606560205260409020600101546102588133610784565b61026283836107e8565b505050565b6001600160a01b03811633146102dc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102e6828261080a565b5050565b600054610100900460ff166103055760005460ff1615610309565b303b155b61036c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102d3565b600054610100900460ff1615801561038e576000805461ffff19166101011790555b61039661082c565b80156103a8576000805461ff00191690555b50565b60008281526097602052604081206103c39083610865565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60007f000000000000000000000000000000000000000000000000000000000000000061042181610871565b6001600160a01b0383166104475760405162820f3560e61b815260040160405180910390fd5b6040516309bca0e760e41b81526001600160a01b0384811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639bca0e7090602401602060405180830381865afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d6919061106a565b90506001600160a01b0381166104fe5760405162820f3560e61b815260040160405180910390fd5b6000816001600160a01b031663b1dd61b66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561053e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105629190611087565b60405163673cea6960e01b815261ffff821660048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063673cea6990602401602060405180830381865afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f4919061106a565b9050826001600160a01b0316816001600160a01b031614156106295760405163386c33d760e11b815260040160405180910390fd5b826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190611087565b61ffff16600114156106f3576106a286848361089a565b604080516001600160a01b03858116825283811660208301528816917f5824452d039893fd42f7f924b3565565211750abd6066eb2e5cf290909d433d4910160405180910390a2935061070c915050565b60405163b01318a560e01b815260040160405180910390fd5b50919050565b600081815260976020526040812061023690610a4c565b6000828152606560205260409020600101546107458133610784565b610262838361080a565b60006001600160e01b03198216637965db0b60e01b148061023657506301ffc9a760e01b6001600160e01b0319831614610236565b61078e82826103ca565b6102e6576107a6816001600160a01b03166014610a56565b6107b1836020610a56565b6040516020016107c29291906110db565b60408051601f198184030181529082905262461bcd60e51b82526102d391600401611150565b6107f28282610bf2565b60008281526097602052604090206102629082610c78565b6108148282610c8d565b60008281526097602052604090206102629082610cf4565b600054610100900460ff166108535760405162461bcd60e51b81526004016102d390611183565b61085b610d09565b610863610d40565b565b60006103c38383610d67565b336001600160a01b038216146103a857604051634ca8886760e01b815260040160405180910390fd5b6040516309b77dbd60e11b81526001600160a01b0384811660048301526000919084169063136efb7a9060240161016060405180830381865afa1580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090991906112f6565b6040805160e08101825282516001600160a01b03908116825260208085015163ffffffff1681840152848401511515838501526060808601511515818501526080808701519085015260a080870151908501528451908101855260c080870180515183528051840151938301939093529151850151818601529083015291516334f7c90960e21b815287831660048201528583166024820152929350919085169063d3df242490604401600060405180830381600087803b1580156109cd57600080fd5b505af11580156109e1573d6000803e3d6000fd5b505060405163259c3da560e11b81526001600160a01b0386169250634b387b4a9150610a1390889085906004016113e7565b600060405180830381600087803b158015610a2d57600080fd5b505af1158015610a41573d6000803e3d6000fd5b505050505050505050565b6000610236825490565b60606000610a658360026114b3565b610a709060026114d2565b67ffffffffffffffff811115610a8857610a886111ce565b6040519080825280601f01601f191660200182016040528015610ab2576020820181803683370190505b509050600360fc1b81600081518110610acd57610acd6114ea565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610afc57610afc6114ea565b60200101906001600160f81b031916908160001a9053506000610b208460026114b3565b610b2b9060016114d2565b90505b6001811115610ba3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610b5f57610b5f6114ea565b1a60f81b828281518110610b7557610b756114ea565b60200101906001600160f81b031916908160001a90535060049490941c93610b9c81611500565b9050610b2e565b5083156103c35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102d3565b610bfc82826103ca565b6102e65760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006103c3836001600160a01b038416610d91565b610c9782826103ca565b156102e65760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006103c3836001600160a01b038416610de0565b600054610100900460ff16610d305760405162461bcd60e51b81526004016102d390611183565b610d38610d40565b610863610ed3565b600054610100900460ff166108635760405162461bcd60e51b81526004016102d390611183565b6000826000018281548110610d7e57610d7e6114ea565b9060005260206000200154905092915050565b6000818152600183016020526040812054610dd857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610236565b506000610236565b60008181526001830160205260408120548015610ec9576000610e04600183611517565b8554909150600090610e1890600190611517565b9050818114610e7d576000866000018281548110610e3857610e386114ea565b9060005260206000200154905080876000018481548110610e5b57610e5b6114ea565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610e8e57610e8e61152e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610236565b6000915050610236565b600054610100900460ff16610efa5760405162461bcd60e51b81526004016102d390611183565b610f247f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509680610f4e565b6108637f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610f99565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6102e682826107e8565b600060208284031215610fb557600080fd5b81356001600160e01b0319811681146103c357600080fd5b600060208284031215610fdf57600080fd5b5035919050565b6001600160a01b03811681146103a857600080fd5b6000806040838503121561100e57600080fd5b82359150602083013561102081610fe6565b809150509250929050565b6000806040838503121561103e57600080fd5b50508035926020909101359150565b60006020828403121561105f57600080fd5b81356103c381610fe6565b60006020828403121561107c57600080fd5b81516103c381610fe6565b60006020828403121561109957600080fd5b815161ffff811681146103c357600080fd5b60005b838110156110c65781810151838201526020016110ae565b838111156110d5576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516111138160178501602088016110ab565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516111448160288401602088016110ab565b01602801949350505050565b602081526000825180602084015261116f8160408501602087016110ab565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561121557634e487b7160e01b600052604160045260246000fd5b60405290565b6040805190810167ffffffffffffffff8111828210171561121557634e487b7160e01b600052604160045260246000fd5b805163ffffffff8116811461126057600080fd5b919050565b8051801515811461126057600080fd5b80516001600160701b038116811461126057600080fd5b60006060828403121561129e57600080fd5b6040516060810181811067ffffffffffffffff821117156112cf57634e487b7160e01b600052604160045260246000fd5b80604052508091508251815260208301516020820152604083015160408201525092915050565b600081830361016081121561130a57600080fd5b6113126111e4565b835161131d81610fe6565b815261132b6020850161124c565b602082015261133c60408501611265565b604082015261134d60608501611265565b60608201526060607f198301121561136457600080fd5b61136c61121b565b6113786080860161124c565b81526040609f198401121561138c57600080fd5b61139461121b565b92506113a260a08601611275565b83526113b060c08601611275565b60208401528260208201528060808301525060e084015160a08201526113da85610100860161128c565b60c0820152949350505050565b60006101808201905060018060a01b0380851683528084511660208401525063ffffffff6020840151166040830152604083015115156060830152606083015115156080830152608083015161146860a0840182805163ffffffff16825260209081015180516001600160701b039081168385015291015116604090910152565b5060a083015161010083015260c090920151805161012083015260208101516101408301526040015161016090910152919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156114cd576114cd61149d565b500290565b600082198211156114e5576114e561149d565b500190565b634e487b7160e01b600052603260045260246000fd5b60008161150f5761150f61149d565b506000190190565b6000828210156115295761152961149d565b500390565b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639010d07c1161008c578063a217fddf11610066578063a217fddf146101d0578063a2ff484f146101d8578063ca15c873146101eb578063d547741f146101fe57600080fd5b80639010d07c1461016c57806391d148541461019757806393867fb5146101aa57600080fd5b806301ffc9a7146100d4578063248a9ca3146100fc5780632f2ff15d1461012d57806336568abe1461014257806354fd4d50146101555780638129fc1c14610164575b600080fd5b6100e76100e2366004610fa3565b610211565b60405190151581526020015b60405180910390f35b61011f61010a366004610fcd565b60009081526065602052604090206001015490565b6040519081526020016100f3565b61014061013b366004610ffb565b61023c565b005b610140610150366004610ffb565b610267565b604051600181526020016100f3565b6101406102ea565b61017f61017a36600461102b565b6103ab565b6040516001600160a01b0390911681526020016100f3565b6100e76101a5366004610ffb565b6103ca565b7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509661011f565b61011f600081565b61017f6101e636600461104d565b6103f5565b61011f6101f9366004610fcd565b610712565b61014061020c366004610ffb565b610729565b60006001600160e01b03198216635a05180f60e01b148061023657506102368261074f565b92915050565b6000828152606560205260409020600101546102588133610784565b61026283836107e8565b505050565b6001600160a01b03811633146102dc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102e6828261080a565b5050565b600054610100900460ff166103055760005460ff1615610309565b303b155b61036c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102d3565b600054610100900460ff1615801561038e576000805461ffff19166101011790555b61039661082c565b80156103a8576000805461ff00191690555b50565b60008281526097602052604081206103c39083610865565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60007f000000000000000000000000000000000000000000000000000000000000000061042181610871565b6001600160a01b0383166104475760405162820f3560e61b815260040160405180910390fd5b6040516309bca0e760e41b81526001600160a01b0384811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639bca0e7090602401602060405180830381865afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d6919061106a565b90506001600160a01b0381166104fe5760405162820f3560e61b815260040160405180910390fd5b6000816001600160a01b031663b1dd61b66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561053e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105629190611087565b60405163673cea6960e01b815261ffff821660048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063673cea6990602401602060405180830381865afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f4919061106a565b9050826001600160a01b0316816001600160a01b031614156106295760405163386c33d760e11b815260040160405180910390fd5b826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190611087565b61ffff16600114156106f3576106a286848361089a565b604080516001600160a01b03858116825283811660208301528816917f5824452d039893fd42f7f924b3565565211750abd6066eb2e5cf290909d433d4910160405180910390a2935061070c915050565b60405163b01318a560e01b815260040160405180910390fd5b50919050565b600081815260976020526040812061023690610a4c565b6000828152606560205260409020600101546107458133610784565b610262838361080a565b60006001600160e01b03198216637965db0b60e01b148061023657506301ffc9a760e01b6001600160e01b0319831614610236565b61078e82826103ca565b6102e6576107a6816001600160a01b03166014610a56565b6107b1836020610a56565b6040516020016107c29291906110db565b60408051601f198184030181529082905262461bcd60e51b82526102d391600401611150565b6107f28282610bf2565b60008281526097602052604090206102629082610c78565b6108148282610c8d565b60008281526097602052604090206102629082610cf4565b600054610100900460ff166108535760405162461bcd60e51b81526004016102d390611183565b61085b610d09565b610863610d40565b565b60006103c38383610d67565b336001600160a01b038216146103a857604051634ca8886760e01b815260040160405180910390fd5b6040516309b77dbd60e11b81526001600160a01b0384811660048301526000919084169063136efb7a9060240161016060405180830381865afa1580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090991906112f6565b6040805160e08101825282516001600160a01b03908116825260208085015163ffffffff1681840152848401511515838501526060808601511515818501526080808701519085015260a080870151908501528451908101855260c080870180515183528051840151938301939093529151850151818601529083015291516334f7c90960e21b815287831660048201528583166024820152929350919085169063d3df242490604401600060405180830381600087803b1580156109cd57600080fd5b505af11580156109e1573d6000803e3d6000fd5b505060405163259c3da560e11b81526001600160a01b0386169250634b387b4a9150610a1390889085906004016113e7565b600060405180830381600087803b158015610a2d57600080fd5b505af1158015610a41573d6000803e3d6000fd5b505050505050505050565b6000610236825490565b60606000610a658360026114b3565b610a709060026114d2565b67ffffffffffffffff811115610a8857610a886111ce565b6040519080825280601f01601f191660200182016040528015610ab2576020820181803683370190505b509050600360fc1b81600081518110610acd57610acd6114ea565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610afc57610afc6114ea565b60200101906001600160f81b031916908160001a9053506000610b208460026114b3565b610b2b9060016114d2565b90505b6001811115610ba3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610b5f57610b5f6114ea565b1a60f81b828281518110610b7557610b756114ea565b60200101906001600160f81b031916908160001a90535060049490941c93610b9c81611500565b9050610b2e565b5083156103c35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102d3565b610bfc82826103ca565b6102e65760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006103c3836001600160a01b038416610d91565b610c9782826103ca565b156102e65760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006103c3836001600160a01b038416610de0565b600054610100900460ff16610d305760405162461bcd60e51b81526004016102d390611183565b610d38610d40565b610863610ed3565b600054610100900460ff166108635760405162461bcd60e51b81526004016102d390611183565b6000826000018281548110610d7e57610d7e6114ea565b9060005260206000200154905092915050565b6000818152600183016020526040812054610dd857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610236565b506000610236565b60008181526001830160205260408120548015610ec9576000610e04600183611517565b8554909150600090610e1890600190611517565b9050818114610e7d576000866000018281548110610e3857610e386114ea565b9060005260206000200154905080876000018481548110610e5b57610e5b6114ea565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610e8e57610e8e61152e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610236565b6000915050610236565b600054610100900460ff16610efa5760405162461bcd60e51b81526004016102d390611183565b610f247f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509680610f4e565b6108637f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610f99565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6102e682826107e8565b600060208284031215610fb557600080fd5b81356001600160e01b0319811681146103c357600080fd5b600060208284031215610fdf57600080fd5b5035919050565b6001600160a01b03811681146103a857600080fd5b6000806040838503121561100e57600080fd5b82359150602083013561102081610fe6565b809150509250929050565b6000806040838503121561103e57600080fd5b50508035926020909101359150565b60006020828403121561105f57600080fd5b81356103c381610fe6565b60006020828403121561107c57600080fd5b81516103c381610fe6565b60006020828403121561109957600080fd5b815161ffff811681146103c357600080fd5b60005b838110156110c65781810151838201526020016110ae565b838111156110d5576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516111138160178501602088016110ab565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516111448160288401602088016110ab565b01602801949350505050565b602081526000825180602084015261116f8160408501602087016110ab565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561121557634e487b7160e01b600052604160045260246000fd5b60405290565b6040805190810167ffffffffffffffff8111828210171561121557634e487b7160e01b600052604160045260246000fd5b805163ffffffff8116811461126057600080fd5b919050565b8051801515811461126057600080fd5b80516001600160701b038116811461126057600080fd5b60006060828403121561129e57600080fd5b6040516060810181811067ffffffffffffffff821117156112cf57634e487b7160e01b600052604160045260246000fd5b80604052508091508251815260208301516020820152604083015160408201525092915050565b600081830361016081121561130a57600080fd5b6113126111e4565b835161131d81610fe6565b815261132b6020850161124c565b602082015261133c60408501611265565b604082015261134d60608501611265565b60608201526060607f198301121561136457600080fd5b61136c61121b565b6113786080860161124c565b81526040609f198401121561138c57600080fd5b61139461121b565b92506113a260a08601611275565b83526113b060c08601611275565b60208401528260208201528060808301525060e084015160a08201526113da85610100860161128c565b60c0820152949350505050565b60006101808201905060018060a01b0380851683528084511660208401525063ffffffff6020840151166040830152604083015115156060830152606083015115156080830152608083015161146860a0840182805163ffffffff16825260209081015180516001600160701b039081168385015291015116604090910152565b5060a083015161010083015260c090920151805161012083015260208101516101408301526040015161016090910152919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156114cd576114cd61149d565b500290565b600082198211156114e5576114e561149d565b500190565b634e487b7160e01b600052603260045260246000fd5b60008161150f5761150f61149d565b506000190190565b6000828210156115295761152961149d565b500390565b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080c000a",
  "devdoc": {
    "details": "Pool Collection Upgrader contract",
    "events": {
      "PoolUpgraded(address,address,address)": {
        "details": "triggered when an existing pool is upgraded"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "a \"virtual\" constructor that is only used to set immutable state variables"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize()": {
        "details": "fully initializes the contract and its parents"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "roleAdmin()": {
        "details": "returns the admin role"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradePool(address)": {
        "details": "upgrades a pool and returns the new pool collection it exists in notes: - invalid or incompatible pools will be skipped gracefully requirements: - the caller must be the network contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 644,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 647,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1165,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1412,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)245_storage)"
      },
      {
        "astId": 538,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 99,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1737_storage)"
      },
      {
        "astId": 209,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22238,
        "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1737_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1737_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)245_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)245_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1737_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1736,
            "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1436_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)245_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 242,
            "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 244,
            "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1436_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1431,
            "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1435,
            "contract": "contracts/pools/PoolCollectionUpgrader.sol:PoolCollectionUpgrader",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}